1
00:00:00,000 --> 00:00:01,000
Hi, everybody.

2
00:00:01,000 --> 00:00:05,000
Welcome to the Bufak Bond Speaker Series.

3
00:00:05,000 --> 00:00:11,000
Today we have a talk by Leif Anderson, who is the global co-head of the Quantitative

4
00:00:11,000 --> 00:00:16,000
Strategies and Data Group at Bankpoint Cup and is an adjunct professor at NYU's Courant

5
00:00:16,000 --> 00:00:19,000
Institute of Mathematical Sciences and at CMU's Taffer School of Business.

6
00:00:19,000 --> 00:00:25,000
He was the co-reception of the RISC Magazine in 2001 and 2018 Award of the Year Award and

7
00:00:25,000 --> 00:00:30,000
recipient of the IAQF Northgate 2024 Financial Engineer of the Year Award by the International

8
00:00:30,000 --> 00:00:35,000
Association for Quantitative Finance and has worked for 30 years as a quantitative researcher

9
00:00:35,000 --> 00:00:36,000
in the global markets area.

10
00:00:36,000 --> 00:00:41,000
He has authored influential research papers and books in all areas of quantitative finance

11
00:00:41,000 --> 00:00:46,000
and is an associate editor of Journal of Computational Finance and Mathematical Finance.

12
00:00:46,000 --> 00:00:52,000
This talk is being attended by clients, so I'm just going to read out the component

13
00:00:52,000 --> 00:00:53,000
statements.

14
00:00:53,000 --> 00:00:57,000
This talk will be open to a number of Bufak clients who will join us online.

15
00:00:57,000 --> 00:01:00,000
Given that our individual is present from different organizations, please do not share

16
00:01:00,000 --> 00:01:05,000
or discuss any sensitive or confidential information or material that could result in a conflict

17
00:01:05,000 --> 00:01:08,000
of interest or any competition legal concerns.

18
00:01:08,000 --> 00:01:10,000
Leif, over to you.

19
00:01:10,000 --> 00:01:12,000
Thank you very much.

20
00:01:12,000 --> 00:01:18,000
So today's topic is going to be about American option pricing, a very old topic, but there's

21
00:01:18,000 --> 00:01:20,000
still some life in it.

22
00:01:20,000 --> 00:01:25,000
The most important part of this slide is for me to remember to say that this is not all

23
00:01:25,000 --> 00:01:26,000
my work.

24
00:01:26,000 --> 00:01:31,000
It is based on work with Rob Avery, Mark Lake, and Dimitri Okugin.

25
00:01:31,000 --> 00:01:37,000
The first two are at Bank of America and the third person was at Bank of America, so it

26
00:01:37,000 --> 00:01:42,000
is definitely a Bank of America effort that I'm going to talk about.

27
00:01:42,000 --> 00:01:45,000
So let's see if I can advance this.

28
00:01:45,000 --> 00:01:47,000
What do I point at?

29
00:01:48,000 --> 00:02:03,000
Maybe I just do this slide here.

30
00:02:03,000 --> 00:02:06,000
Okay.

31
00:02:06,000 --> 00:02:09,000
So slight technical difficulty in advancing.

32
00:02:09,000 --> 00:02:10,000
There we go.

33
00:02:10,000 --> 00:02:11,000
Okay.

34
00:02:11,000 --> 00:02:12,000
Let's see if it works.

35
00:02:12,000 --> 00:02:13,000
Yep, it's working.

36
00:02:13,000 --> 00:02:14,000
Yep.

37
00:02:14,000 --> 00:02:17,000
Okay, so this will be a financial engineering talk.

38
00:02:17,000 --> 00:02:22,000
For those that are here to see something artificial intelligence, I suggest you just leave the

39
00:02:22,000 --> 00:02:26,000
room because this is what it's going to be about.

40
00:02:26,000 --> 00:02:31,000
And it's going to be on probably the most financial engineering problem of all time,

41
00:02:31,000 --> 00:02:33,000
namely American options.

42
00:02:33,000 --> 00:02:39,000
This is a topic that has occupied engineers in the financial space for five decades and

43
00:02:39,000 --> 00:02:47,000
it's still not quite settled, especially as it pertains to how to do these things efficiently.

44
00:02:47,000 --> 00:02:51,000
So this presentation here is going to be high level.

45
00:02:51,000 --> 00:02:53,000
It's going to be a little rushed.

46
00:02:53,000 --> 00:02:54,000
I have too many slides.

47
00:02:54,000 --> 00:02:57,000
I'm normally advocate of using very few slides.

48
00:02:57,000 --> 00:03:03,000
For this particular topic, it cannot be avoided simply because, as it turns out, the American

49
00:03:03,000 --> 00:03:08,000
option problem is not one that can be attacked with a single method.

50
00:03:08,000 --> 00:03:13,000
These circumstances will dictate that you need multiple methods, at least if you want

51
00:03:13,000 --> 00:03:20,000
to do the most efficient and most performant, smoothest, and most convergent method.

52
00:03:20,000 --> 00:03:25,000
And then you just have to bite the bullet and realize that there are a variety of branches

53
00:03:25,000 --> 00:03:28,000
you have to take in your code and in your thinking.

54
00:03:28,000 --> 00:03:33,000
So here's just the â€“ we'll start with a warm-up exercise about the mutant option.

55
00:03:33,000 --> 00:03:36,000
So here I'm looking at a mutant option.

56
00:03:36,000 --> 00:03:42,000
Basically, its process value is going to be V sub P. That's the fair value of the

57
00:03:42,000 --> 00:03:43,000
mutant.

58
00:03:43,000 --> 00:03:45,000
And this will be exercisable on a discrete schedule.

59
00:03:45,000 --> 00:03:50,000
So there's going to be an exercise point on this.

60
00:03:50,000 --> 00:03:55,000
And if you own one of these things, then you have the right, but not the obligation, to

61
00:03:55,000 --> 00:03:58,000
exercise it at any point of this discrete schedule.

62
00:03:58,000 --> 00:04:02,000
So you'll have an exercise opportunity.

63
00:04:02,000 --> 00:04:07,000
Depending on what contract it is, there will be a specification of what you'll get if you

64
00:04:07,000 --> 00:04:08,000
exercise.

65
00:04:08,000 --> 00:04:11,000
So E sub P here is the exercise value.

66
00:04:11,000 --> 00:04:13,000
This is what you get if you exercise.

67
00:04:13,000 --> 00:04:17,000
You don't have to exercise, but when you do, that's what you're going to get.

68
00:04:17,000 --> 00:04:22,000
And if you have some exercise strategy here new that must take values in this discrete

69
00:04:22,000 --> 00:04:28,000
schedule in mind, so you may come up with something, then I can associate that exercise

70
00:04:28,000 --> 00:04:35,000
strategy with a present value, which is simply just a discounted value of the payout at the

71
00:04:35,000 --> 00:04:37,000
time new that you get it.

72
00:04:37,000 --> 00:04:39,000
New here being a stochastic variable.

73
00:04:39,000 --> 00:04:41,000
You don't quite know when you'll exercise.

74
00:04:41,000 --> 00:04:44,000
You have a strategy in mind, but it's probably stochastic.

75
00:04:44,000 --> 00:04:49,000
And here beta, the money market accounts are just a discounted, expected discounted value

76
00:04:49,000 --> 00:04:51,000
in the risk neutral measure.

77
00:04:51,000 --> 00:04:57,000
That should be old hat for most of you on here and on the phone.

78
00:04:57,000 --> 00:05:04,000
Now, if we assume that the holder will exercise to maximize the value, then the permutant

79
00:05:04,000 --> 00:05:11,000
option value is simply the supremum of all these individual, the value should we get for

80
00:05:11,000 --> 00:05:13,000
the universal exercise strategy.

81
00:05:13,000 --> 00:05:16,000
So you pick the best strategy.

82
00:05:16,000 --> 00:05:18,000
B star is the optimal exercise.

83
00:05:18,000 --> 00:05:23,000
So that's how we're gonna designate the American, the permutant option value.

84
00:05:23,000 --> 00:05:29,000
Of course, if the holder doesn't follow the optimal exercise rule, the guy on the other

85
00:05:29,000 --> 00:05:30,000
side can up.

86
00:05:30,000 --> 00:05:36,000
The holder, so this is sort of the arbitrage-free value of the permutant option value.

87
00:05:36,000 --> 00:05:39,000
So how to characterize it.

88
00:05:39,000 --> 00:05:45,000
So we have already defined something called the exercise value E sub B, that's time TI.

89
00:05:45,000 --> 00:05:48,000
So we defined E sub B as the exercise value.

90
00:05:48,000 --> 00:05:50,000
Now we're gonna define the holding value.

91
00:05:50,000 --> 00:05:55,000
That is simply the value of the permutant option if you choose not to exercise.

92
00:05:55,000 --> 00:06:02,000
So the holding value will be the present value of the permutant value one period ahead, because

93
00:06:02,000 --> 00:06:04,000
you know you're not gonna exercise it now.

94
00:06:04,000 --> 00:06:07,000
So what you're looking at is just what's in the future.

95
00:06:07,000 --> 00:06:12,000
So now you have two things, the exercise value and the holding value.

96
00:06:12,000 --> 00:06:19,000
And then the Bellman backwards principle basically just says at current time C sub I, the value

97
00:06:19,000 --> 00:06:24,000
of the permutant is gonna be the maximum of the holding value and the exercise value.

98
00:06:24,000 --> 00:06:31,000
And if I stop in my definition of the holding value, in here you'll get equation one.

99
00:06:31,000 --> 00:06:35,000
This is an equation that a lot of people have stared at.

100
00:06:35,000 --> 00:06:40,000
And especially if you're a data scientist, you'll look at a value like this and notice

101
00:06:40,000 --> 00:06:46,000
that if they recurse it and that's of it, the value today depends on something in the future.

102
00:06:46,000 --> 00:06:49,000
And it has a reward function.

103
00:06:49,000 --> 00:06:56,000
So if you are in the machine learning space, this to me, this to you would look like a

104
00:06:56,000 --> 00:06:58,000
reinforcement learning problem.

105
00:06:58,000 --> 00:07:05,000
And you would then attack this with a neural network to estimate the holding value for Monte Carlo samples.

106
00:07:05,000 --> 00:07:13,000
So that's kind of the lot of, sort of recent work on this problem is data scientists jumping into it

107
00:07:13,000 --> 00:07:19,000
and saying let's use the neural network, let's use this technology for this problem.

108
00:07:19,000 --> 00:07:22,000
To me that's not such an interesting avenue.

109
00:07:22,000 --> 00:07:28,000
There's a version of this that's a finance oriented Monte Carlo algorithm, the Longster-Schwarz algorithm

110
00:07:28,000 --> 00:07:30,000
that works very similarly.

111
00:07:30,000 --> 00:07:33,000
It uses a polynomial regression.

112
00:07:33,000 --> 00:07:40,000
And that particular approach for all practical purposes that I've seen so far is just as performant

113
00:07:40,000 --> 00:07:48,000
as a neural network and is definitely to be also simple and has in many cases you can set them up to be better

114
00:07:48,000 --> 00:07:51,000
and easier to explain.

115
00:07:51,000 --> 00:07:56,000
But anyway, this particular problem on the Monte Carlo approach is not one that I'm going to spend too much time on.

116
00:07:56,000 --> 00:08:02,000
Just know that there's a branch, a relatively recent branch of work in this space that I've

117
00:08:02,000 --> 00:08:06,000
been looking at applying AI type methods to it.

118
00:08:06,000 --> 00:08:11,000
And that's the closest I'll get to AI in this talk just so you can do it, but I wouldn't really recommend it

119
00:08:11,000 --> 00:08:14,000
except for very complicated problems.

120
00:08:14,000 --> 00:08:22,000
So the American option is just the limiting case of the Bermuda option when the exercise becomes continuous.

121
00:08:22,000 --> 00:08:26,000
So you can exercise any time you want, not just on the discrete problem.

122
00:08:26,000 --> 00:08:31,000
So on a discrete timeline you could say well I could just price everything as a Bermuda

123
00:08:31,000 --> 00:08:36,000
but just let the limit go to, the spacing go to zero.

124
00:08:36,000 --> 00:08:39,000
Obviously it's a very, very slow way of doing it.

125
00:08:39,000 --> 00:08:43,000
It's also only linearly convergent approximation.

126
00:08:43,000 --> 00:08:47,000
So I would not recommend that you do this.

127
00:08:47,000 --> 00:08:50,000
You want to do other things as we'll get to.

128
00:08:50,000 --> 00:08:55,000
But you could if you have a method for Bermuda and you put in lots and lots and lots of exercise points

129
00:08:55,000 --> 00:09:01,000
then you will converge the American just very slowly and of course the effort is going to be crucial.

130
00:09:01,000 --> 00:09:07,000
As you say in the interest rate space Bermuda options are far more common than American options.

131
00:09:07,000 --> 00:09:12,000
However in the equity space which is what I'm going to look at is the other way around.

132
00:09:12,000 --> 00:09:17,000
Significant majority of exchange traded options are in fact American.

133
00:09:17,000 --> 00:09:24,000
So in the equity space volumes are high, model dimension is low, and speed precision is of importance.

134
00:09:25,000 --> 00:09:29,000
So wouldn't suggest a Monte Carlo approach for sure for this.

135
00:09:29,000 --> 00:09:32,000
That would be an overkill and it would be too slow.

136
00:09:32,000 --> 00:09:35,000
First part, integral methods.

137
00:09:35,000 --> 00:09:41,000
Here's some references that you can look at if you want to dive into it later on.

138
00:09:41,000 --> 00:09:44,000
So there are many, many, many people that have written in this.

139
00:09:44,000 --> 00:09:52,000
Of course I have listed the talks and papers that I've been involved with because I'm going to lean on them.

140
00:09:52,000 --> 00:09:59,000
But just open any one of these and you will see lots and lots of other references in there.

141
00:10:02,000 --> 00:10:09,000
Okay, so in the equity world and the advantage of the equity world besides being low dimensional is that it's still

142
00:10:09,000 --> 00:10:13,000
actually very relevant to look at Black-Scholes like dynamics.

143
00:10:13,000 --> 00:10:20,000
Because quotation practices and implied ball calculation and interpolation and de-Americanization

144
00:10:20,000 --> 00:10:25,000
and lots of procedures required to price American options in Black-Scholes like dynamics.

145
00:10:25,000 --> 00:10:27,000
So let's start with that.

146
00:10:27,000 --> 00:10:34,000
And here in the middle of the page we have the Black-Scholes dynamic in the risk neutral measure with an interest rate of R

147
00:10:34,000 --> 00:10:39,000
and a dividend yield of Q and a volatility of sigma.

148
00:10:39,000 --> 00:10:48,000
The approach I'm going to talk about can also handle time dependence and can also handle negative rates and dividends.

149
00:10:48,000 --> 00:10:53,000
And you can see a reference that shows you how to modify the algorithms for that case.

150
00:10:53,000 --> 00:10:56,000
I'm going to do that just because it gets messier.

151
00:10:56,000 --> 00:11:00,000
And then I have, I'm looking at a particular payout now.

152
00:11:00,000 --> 00:11:03,000
So that's E sub P that I looked at which was the payout.

153
00:11:03,000 --> 00:11:08,000
I'm going to look at a particular contract now, namely the American put option.

154
00:11:08,000 --> 00:11:15,000
And it just pays the maximum of the strike minus the stock price at the time that you are exercised.

155
00:11:15,000 --> 00:11:20,000
So if you can do the put, you can do the call by put call symmetry.

156
00:11:20,000 --> 00:11:27,000
So that optimal exercise strategy I discussed earlier, for this particular case it has a very simple form.

157
00:11:27,000 --> 00:11:35,000
It's known that you exercise when you are below some barrier, S star T, sub T here.

158
00:11:35,000 --> 00:11:41,000
So it depends on the maturity which is why I put an index on the T index on it.

159
00:11:41,000 --> 00:11:46,000
But there is some barrier that if you go below it, then you should exercise.

160
00:11:46,000 --> 00:11:48,000
And this is what it looks like.

161
00:11:48,000 --> 00:11:56,000
There's a, you see this blue thing separates the universe into a whole region and an exercised region.

162
00:11:56,000 --> 00:11:59,000
Not much to say about it other than it kind of looks like this.

163
00:11:59,000 --> 00:12:01,000
I've drawn it.

164
00:12:01,000 --> 00:12:08,000
And maybe notice that as you get close to the maturity, T, there's a very rapid variation.

165
00:12:08,000 --> 00:12:15,000
And it kind of goes sort of slowly and then suddenly the boundary picks up and becomes vertical.

166
00:12:15,000 --> 00:12:20,000
But at a very rapid speed as you get closer and closer to maturity,

167
00:12:20,000 --> 00:12:24,000
that's something that you need to think about in a numerical method.

168
00:12:24,000 --> 00:12:30,000
And it's something that reference to spent a lot of time on dissecting and understanding.

169
00:12:31,000 --> 00:12:38,000
So beyond having this exercise boundary, what else can we say?

170
00:12:38,000 --> 00:12:41,000
Well, what I'm gonna do here is I'm gonna flip time around.

171
00:12:41,000 --> 00:12:46,000
So instead of working with calendar time, I'm gonna work with time to maturity.

172
00:12:46,000 --> 00:12:48,000
So capital T minus little t.

173
00:12:48,000 --> 00:12:50,000
How much is left?

174
00:12:50,000 --> 00:12:53,000
We're gonna run time the other way, so to speak.

175
00:12:53,000 --> 00:13:03,000
And in that world, we know that the American food price satisfies a Black-Scholes equation

176
00:13:03,000 --> 00:13:09,000
if you're in the continuation region where you're still holding on to the option.

177
00:13:09,000 --> 00:13:11,000
And then there's a couple of conditions.

178
00:13:11,000 --> 00:13:20,000
There are actually many conditions, five, six of them, that characterize the boundary between exercise and non-exercise.

179
00:13:20,000 --> 00:13:24,000
One is the value match condition that just says when you hit the boundary,

180
00:13:24,000 --> 00:13:31,000
you're gonna get the payouts of strike minus the value of the stock price,

181
00:13:31,000 --> 00:13:34,000
which is equal to the boundary when you hit it.

182
00:13:34,000 --> 00:13:41,000
And then there's smooth pasting, which is that you paste smoothly onto the put option ramp.

183
00:13:41,000 --> 00:13:46,000
And there's a few more that I didn't bother writing down that talks about what the gamma is like,

184
00:13:46,000 --> 00:13:48,000
what the theta is like, and so forth.

185
00:13:48,000 --> 00:13:50,000
But these are the most well known.

186
00:13:50,000 --> 00:13:51,000
So I'll list those.

187
00:13:51,000 --> 00:13:57,000
This is the characterization of what the boundary must satisfy.

188
00:13:57,000 --> 00:14:05,000
And then a cool result that dates back to actually quite a while is that it shows that the solution to this PDE

189
00:14:05,000 --> 00:14:12,000
and the solution to the American option price when you're in the holding region

190
00:14:12,000 --> 00:14:18,000
can be written as the European price plus some simple integrals,

191
00:14:18,000 --> 00:14:20,000
which is a remarkable result.

192
00:14:20,000 --> 00:14:24,000
Instead of having a PDE to solve, now you get just an integral.

193
00:14:24,000 --> 00:14:27,000
It's just an integral in time.

194
00:14:27,000 --> 00:14:32,000
And I guess what these integrals involve, just some cumulative Gaussians.

195
00:14:32,000 --> 00:14:36,000
But they also involve the boundary itself.

196
00:14:37,000 --> 00:14:46,000
So as a practical matter, evaluating this simple looking formula requires one to establish this boundary in the first place.

197
00:14:46,000 --> 00:14:52,000
So it's a cool equation, but it has, and it has, from a numerical perspective,

198
00:14:52,000 --> 00:14:57,000
the eyes pop open when you see a PDE turned into an integral.

199
00:14:57,000 --> 00:15:03,000
Because integrals from a numerical perspective are far better to work with than PDEs.

200
00:15:03,000 --> 00:15:08,000
PDEs, if they get discretized, have all kinds of problems with their convergence order,

201
00:15:08,000 --> 00:15:11,000
with rounding error and so forth, and tend to be slow.

202
00:15:11,000 --> 00:15:14,000
Whereas an integral can be attacked by a quadrature method.

203
00:15:14,000 --> 00:15:25,000
And those methods can be made almost arbitrarily fast and speedy and converge really, really fast and so forth.

204
00:15:25,000 --> 00:15:28,000
So this looks like a promising avenue.

205
00:15:28,000 --> 00:15:31,000
The only problem is we need to find that boundary.

206
00:15:31,000 --> 00:15:34,000
And one thing you can do is you can take the equation and say,

207
00:15:34,000 --> 00:15:37,000
well, it needs to hold on the boundary itself.

208
00:15:37,000 --> 00:15:42,000
So it holds when you are in the holding region, but also right at the boundary.

209
00:15:42,000 --> 00:15:49,000
So then you can stop in the boundary everywhere with it as you might get an equation for the boundary.

210
00:15:49,000 --> 00:15:50,000
So that's great.

211
00:15:50,000 --> 00:15:52,000
Now you have an equation for the boundary.

212
00:15:52,000 --> 00:15:56,000
It's a little bit of a complicated equation because on the left hand side,

213
00:15:56,000 --> 00:16:00,000
you have the boundary evaluated as a function of time.

214
00:16:00,000 --> 00:16:05,000
And on the right hand side, you have integrals over the boundary.

215
00:16:05,000 --> 00:16:11,000
So these you have like a function and then you have a function L on the other side.

216
00:16:11,000 --> 00:16:14,000
So this is one equation you can do.

217
00:16:14,000 --> 00:16:18,000
You can also use the smooth pasting equation, and you can use expressions for gamma.

218
00:16:18,000 --> 00:16:24,000
You can come up with a large number of equivalent characterization of the boundary.

219
00:16:24,000 --> 00:16:27,000
The equivalent, but they may have different numerical properties.

220
00:16:27,000 --> 00:16:31,000
And you can look at the reference number two if you want to see an analysis

221
00:16:31,000 --> 00:16:35,000
of some of the different approximations.

222
00:16:35,000 --> 00:16:39,000
Ultimately, all of these approaches will lead to equations for the boundary itself.

223
00:16:39,000 --> 00:16:41,000
This form here is seven.

224
00:16:41,000 --> 00:16:45,000
It has a numerator and a denominator that both are functionals.

225
00:16:45,000 --> 00:16:49,000
They involve integrals over the life of the option of the boundary.

226
00:16:49,000 --> 00:16:52,000
And how do you solve a system like this?

227
00:16:52,000 --> 00:16:55,000
This is like an integral equation.

228
00:16:56,000 --> 00:16:58,000
As it turns out, there are many ways of doing it.

229
00:16:58,000 --> 00:17:02,000
The fastest we think is to use a fixed point method,

230
00:17:02,000 --> 00:17:06,000
where you start with a really good guess for the boundary,

231
00:17:06,000 --> 00:17:09,000
and then you plug it in on the right hand side,

232
00:17:09,000 --> 00:17:13,000
and then out will pop a new recommendation for what the boundary should be.

233
00:17:13,000 --> 00:17:18,000
And then you pop that back in, and then you iterate on this.

234
00:17:18,000 --> 00:17:24,000
This particular method is a collocation method that's proposed in two.

235
00:17:24,000 --> 00:17:27,000
It does require some interpolation, and on the boundary,

236
00:17:27,000 --> 00:17:31,000
you need to introduce a number of transforms,

237
00:17:31,000 --> 00:17:33,000
but pretty much that's how it operates.

238
00:17:33,000 --> 00:17:35,000
You guess at the boundary, and then you plug it in

239
00:17:35,000 --> 00:17:38,000
and see what you get back for the boundary, and then you iterate.

240
00:17:38,000 --> 00:17:44,000
Normally two, three iterations is enough for even a high precision application.

241
00:17:44,000 --> 00:17:49,000
And once you have found the boundary by this iteration, then you go back to this,

242
00:17:49,000 --> 00:17:51,000
which is just an integral.

243
00:17:51,000 --> 00:17:54,000
You can do that by your favorite Gauss-Lashondra,

244
00:17:54,000 --> 00:17:59,000
any kind of, or a Sanch-Sensha, any kind of quadrature rule you like.

245
00:18:00,000 --> 00:18:02,000
Pros and cons for this method.

246
00:18:02,000 --> 00:18:08,000
Spectral convergence, which means, spectral convergence to me means that if you double the effort,

247
00:18:08,000 --> 00:18:11,000
you get twice as many significant digits precision.

248
00:18:11,000 --> 00:18:18,000
That's very different from the type of convergence you'll see in a finite difference grid or something.

249
00:18:18,000 --> 00:18:20,000
So you double the effort, then you get,

250
00:18:20,000 --> 00:18:24,000
the error is just cut in half or cut divided by four.

251
00:18:24,000 --> 00:18:26,000
Here it works much, much faster.

252
00:18:26,000 --> 00:18:31,000
Double the effort, twice as many significant digits are accurate.

253
00:18:31,000 --> 00:18:34,000
So it's a completely different ballgame once you're in there.

254
00:18:34,000 --> 00:18:37,000
Except really high speed and precision.

255
00:18:37,000 --> 00:18:41,000
So we ran some tests just to see our latest implementation.

256
00:18:41,000 --> 00:18:46,000
So if you want 10 to the minus seven precision on a modern computer,

257
00:18:46,000 --> 00:18:50,000
an average modern computer, not a super computer,

258
00:18:50,000 --> 00:18:53,000
a single PC that you can buy and store,

259
00:18:53,000 --> 00:19:00,000
is about, the speed is something like 125,000 options per second.

260
00:19:00,000 --> 00:19:02,000
You want to compare that to a binomial tree.

261
00:19:02,000 --> 00:19:07,000
Binomial trees will have a very, very tough time hitting 10 to the minus seven,

262
00:19:07,000 --> 00:19:10,000
because in part of the way they're constructed.

263
00:19:10,000 --> 00:19:15,000
But let's say, I think you can do much less than one option per second at this precision,

264
00:19:15,000 --> 00:19:19,000
just because you get 10 to the minus third, 10 to the minus fourth.

265
00:19:19,000 --> 00:19:24,000
If you lock in a binomial tree, and then to get three orders more precision,

266
00:19:24,000 --> 00:19:27,000
there's no way you can do it so basically.

267
00:19:27,000 --> 00:19:32,000
Of course, if I need less precision, I can, this number goes up correspondingly.

268
00:19:32,000 --> 00:19:36,000
If you just want 10 to the minus 10,

269
00:19:36,000 --> 00:19:39,000
then we can do something like 10,000 options.

270
00:19:39,000 --> 00:19:41,000
So a lot of precision. Do you need it?

271
00:19:41,000 --> 00:19:44,000
Well, depends what you are into.

272
00:19:44,000 --> 00:19:47,000
Any routine that is inserted in some kind of loop,

273
00:19:47,000 --> 00:19:50,000
a calibration loop, should be accurate.

274
00:19:51,000 --> 00:19:55,000
But anyway, you can take those numbers if you want less precision,

275
00:19:55,000 --> 00:19:57,000
then you can move them all up.

276
00:19:57,000 --> 00:19:59,000
What are the drawbacks here?

277
00:19:59,000 --> 00:20:04,000
Difficulties with discrete dividends, especially for American calls.

278
00:20:05,000 --> 00:20:08,000
And then it requires close-form European option price formula.

279
00:20:08,000 --> 00:20:12,000
So if you have some kind of, for instance, a local volatility model,

280
00:20:12,000 --> 00:20:16,000
this is gonna be difficult for you because it does ultimately require

281
00:20:16,000 --> 00:20:21,000
a European option price formula embedded in everything.

282
00:20:22,000 --> 00:20:23,000
Good.

283
00:20:23,000 --> 00:20:26,000
So let me just talk a little bit about dividends.

284
00:20:26,000 --> 00:20:28,000
I said that here.

285
00:20:28,000 --> 00:20:30,000
It has difficulty with discrete dividends.

286
00:20:30,000 --> 00:20:33,000
What is the problem with discrete dividends?

287
00:20:33,000 --> 00:20:36,000
Now I'm gonna take my process, I'm gonna modify it.

288
00:20:36,000 --> 00:20:41,000
But I take what was before was Q, which was the dividend yield.

289
00:20:41,000 --> 00:20:46,000
I'm gonna stop in and step jumpy dividends at some schedule.

290
00:20:46,000 --> 00:20:49,000
Every time you cross over those dates,

291
00:20:49,000 --> 00:20:53,000
then the stock price will dump down by a certain amount,

292
00:20:53,000 --> 00:20:57,000
the I, that can be a function of the stock price just before the dividend.

293
00:20:59,000 --> 00:21:02,000
And there's only one case of this where you can handle,

294
00:21:02,000 --> 00:21:04,000
that can be handled with this integral method.

295
00:21:04,000 --> 00:21:08,000
And that is when the dividends are proportional.

296
00:21:08,000 --> 00:21:11,000
So there's this form that they're basically a certain fraction

297
00:21:11,000 --> 00:21:15,000
of the stock price where the fraction must be between,

298
00:21:15,000 --> 00:21:17,000
you know, one, zero and one.

299
00:21:17,000 --> 00:21:19,000
So you don't wanna pay more than the stock price,

300
00:21:19,000 --> 00:21:23,000
but you can pay half of it or 1% of it or something like that.

301
00:21:23,000 --> 00:21:26,000
If you have that case, it is possible to extend everything.

302
00:21:26,000 --> 00:21:29,000
I'm not gonna go through it, but in this case,

303
00:21:30,000 --> 00:21:33,000
you will see that since the put,

304
00:21:33,000 --> 00:21:37,000
you will never exercise it right before dividend is paid.

305
00:21:37,000 --> 00:21:40,000
So the exercise boundary starts looking a little different.

306
00:21:40,000 --> 00:21:44,000
It gets driven into zero right before every dividend.

307
00:21:44,000 --> 00:21:49,000
So you get this kind of look to your exercise boundary.

308
00:21:50,000 --> 00:21:53,000
And what you need to do to the method is just split the domain

309
00:21:53,000 --> 00:21:55,000
into one, two, three pieces,

310
00:21:55,000 --> 00:21:58,000
and then you can basically repeat the method.

311
00:21:58,000 --> 00:22:02,000
You integrate over these pieces one by one,

312
00:22:02,000 --> 00:22:04,000
and then you run the method from the back.

313
00:22:04,000 --> 00:22:06,000
And you can see that in one of the references,

314
00:22:06,000 --> 00:22:08,000
how to do that, it's not difficult.

315
00:22:08,000 --> 00:22:12,000
So you can handle it, and that will be on average

316
00:22:12,000 --> 00:22:15,000
the speed of this if you have,

317
00:22:15,000 --> 00:22:17,000
in this case you have two proportional dividends

318
00:22:17,000 --> 00:22:19,000
that you have three regions.

319
00:22:19,000 --> 00:22:22,000
So you're gonna be about three times slower,

320
00:22:22,000 --> 00:22:24,000
but a little better than that,

321
00:22:24,000 --> 00:22:26,000
because these things here,

322
00:22:26,000 --> 00:22:28,000
these are very smooth and easy to handle.

323
00:22:28,000 --> 00:22:31,000
It's only the last one that's a little trickier

324
00:22:31,000 --> 00:22:33,000
because it has this, you know,

325
00:22:33,000 --> 00:22:37,000
as you get closer to the bound, to maturity,

326
00:22:37,000 --> 00:22:40,000
then the boundary becomes more unruly.

327
00:22:40,000 --> 00:22:42,000
So basically if you have four dividends,

328
00:22:42,000 --> 00:22:44,000
then take the number, two dividends,

329
00:22:44,000 --> 00:22:47,000
take the numbers that I showed you before

330
00:22:47,000 --> 00:22:50,000
and multiply everything by say, two and a half.

331
00:22:50,000 --> 00:22:53,000
And you're still gonna have a very, very performant method.

332
00:22:54,000 --> 00:22:58,000
So now that was for the put.

333
00:22:58,000 --> 00:23:02,000
For the American call with these types of discrete dividends,

334
00:23:03,000 --> 00:23:06,000
the wheels kind of fall off these methods.

335
00:23:06,000 --> 00:23:08,000
And that's because the boundary for an American

336
00:23:08,000 --> 00:23:12,000
exercise boundary is gonna look very strange.

337
00:23:12,000 --> 00:23:16,000
And because as it turns out, the only possible exercise

338
00:23:16,000 --> 00:23:20,000
dates for a call are just before each dividend.

339
00:23:20,000 --> 00:23:23,000
Unless you have a borrowed cost, which is a different story,

340
00:23:23,000 --> 00:23:25,000
but if you don't have a borrowed cost,

341
00:23:25,000 --> 00:23:29,000
then those are the only dates that you could consider.

342
00:23:29,000 --> 00:23:31,000
And sometimes you wouldn't even exercise

343
00:23:31,000 --> 00:23:32,000
on any of those dates.

344
00:23:32,000 --> 00:23:36,000
So the call is very sparse in this exercise opportunities.

345
00:23:36,000 --> 00:23:39,000
There's no boundary, there's just a set of points.

346
00:23:39,000 --> 00:23:43,000
So the exercise boundary now gets degenerate

347
00:23:43,000 --> 00:23:46,000
and there's nothing to integrate along anymore.

348
00:23:46,000 --> 00:23:50,000
So for this case, you cannot use the integral methods

349
00:23:50,000 --> 00:23:52,000
and you are gonna do something different.

350
00:23:52,000 --> 00:23:55,000
And that's what I'm gonna talk about next.

351
00:23:55,000 --> 00:23:57,000
So now you have discrete dividends,

352
00:23:57,000 --> 00:23:59,000
so how are you gonna handle those?

353
00:24:00,000 --> 00:24:03,000
I'm gonna go back to, this is the process here.

354
00:24:03,000 --> 00:24:07,000
I have a little geometric Brownian notion on this rip

355
00:24:07,000 --> 00:24:09,000
and the volatility term.

356
00:24:09,000 --> 00:24:13,000
And I have this series of dividends that jump.

357
00:24:13,000 --> 00:24:15,000
Before I just looked at the proportional case,

358
00:24:15,000 --> 00:24:19,000
I'm gonna extend that to be more ambitious now.

359
00:24:19,000 --> 00:24:22,000
So I'm gonna let this be a more general function

360
00:24:22,000 --> 00:24:24,000
so the dividends can be more general functions

361
00:24:24,000 --> 00:24:25,000
of the stock price.

362
00:24:25,000 --> 00:24:30,000
For instance, you can use this mixed dividend model

363
00:24:30,000 --> 00:24:34,000
which is, it has a proportional part and a fixed part.

364
00:24:34,000 --> 00:24:37,000
So the fixed part is some dividend that you know for sure

365
00:24:37,000 --> 00:24:40,000
will be paid and then maybe that's a little bit of extra

366
00:24:40,000 --> 00:24:43,000
that depends on how well the stock price is doing.

367
00:24:43,000 --> 00:24:45,000
If you have very sticky dividend,

368
00:24:45,000 --> 00:24:48,000
you will have a fixed component here.

369
00:24:48,000 --> 00:24:50,000
This model is very popular.

370
00:24:50,000 --> 00:24:53,000
Very often you will just get rid of entirely

371
00:24:53,000 --> 00:24:56,000
of the proportional piece and just look at cash dividends.

372
00:24:56,000 --> 00:24:59,000
It's popular but it has some, it's unrealistic.

373
00:24:59,000 --> 00:25:01,000
So while I'm at it here, let's talk about,

374
00:25:01,000 --> 00:25:05,000
I'd like to build an approach that can handle also more

375
00:25:05,000 --> 00:25:10,000
elegance and better specifications of the dividends.

376
00:25:12,000 --> 00:25:14,000
For instance, in that model, the mixed dividend,

377
00:25:14,000 --> 00:25:17,000
if the stock price is too low,

378
00:25:17,000 --> 00:25:19,000
at some point and you have a dividend,

379
00:25:19,000 --> 00:25:21,000
you're gonna cross through zero.

380
00:25:21,000 --> 00:25:24,000
That's if this cash piece is non-zero,

381
00:25:24,000 --> 00:25:29,000
then you, in the model, maybe the stock price

382
00:25:29,000 --> 00:25:32,000
is like worth $1 and this dividend is supposed to be $2

383
00:25:32,000 --> 00:25:34,000
and then you're gonna get into zero.

384
00:25:34,000 --> 00:25:36,000
So not super great.

385
00:25:36,000 --> 00:25:39,000
Still very popular model and everything I'm talking about

386
00:25:39,000 --> 00:25:42,000
here will be able to accommodate the model.

387
00:25:42,000 --> 00:25:44,000
But I like maybe this class here,

388
00:25:44,000 --> 00:25:46,000
rational dividend policies.

389
00:25:46,000 --> 00:25:49,000
Basically these are just specifications where you ensure

390
00:25:49,000 --> 00:25:52,000
that the dividend is never bigger than the stock price.

391
00:25:52,000 --> 00:25:54,000
So when the dividend is paid,

392
00:25:54,000 --> 00:25:57,000
it is supposed to be less than the stock price

393
00:25:57,000 --> 00:26:00,000
so you don't pay yourself out of house and home

394
00:26:00,000 --> 00:26:02,000
or something like that.

395
00:26:02,000 --> 00:26:06,000
So yeah, the four models that were listed in there.

396
00:26:06,000 --> 00:26:10,000
Model one is the proportional dividend model.

397
00:26:10,000 --> 00:26:14,000
Model two is similar.

398
00:26:14,000 --> 00:26:19,000
Model four, the last one is the mix of cash

399
00:26:19,000 --> 00:26:21,000
and proportional.

400
00:26:21,000 --> 00:26:24,000
So it has the unfortunate fact that it crosses

401
00:26:24,000 --> 00:26:26,000
over this 45 degree line.

402
00:26:26,000 --> 00:26:28,000
So for sufficiently small stock prices,

403
00:26:28,000 --> 00:26:31,000
the dividend is bigger than the stock price itself.

404
00:26:31,000 --> 00:26:33,000
But then there's a variety of things you can do

405
00:26:33,000 --> 00:26:34,000
to prevent that.

406
00:26:34,000 --> 00:26:37,000
One is to kink it down at some point.

407
00:26:37,000 --> 00:26:39,000
That is what model two does.

408
00:26:39,000 --> 00:26:40,000
At some point it's gonna say,

409
00:26:40,000 --> 00:26:43,000
no, I can't pay that much in dividends.

410
00:26:43,000 --> 00:26:47,000
So I'm gonna start paying less and I'm paying that

411
00:26:47,000 --> 00:26:49,000
sort of proportional only.

412
00:26:49,000 --> 00:26:51,000
And another model would just say stop,

413
00:26:51,000 --> 00:26:54,000
I'm not paying dividends below a certain threshold

414
00:26:54,000 --> 00:26:56,000
because then I'm in a bad shape

415
00:26:56,000 --> 00:26:58,000
and I'm not gonna pay any dividends.

416
00:26:58,000 --> 00:27:00,000
So all these dividends and you can invent many more

417
00:27:00,000 --> 00:27:02,000
can be accommodated.

418
00:27:02,000 --> 00:27:06,000
So an interesting thing is of course these things themselves

419
00:27:06,000 --> 00:27:08,000
the dividends are now,

420
00:27:08,000 --> 00:27:11,000
except for model one and model four here,

421
00:27:11,000 --> 00:27:14,000
they are nonlinear in the underlying.

422
00:27:14,000 --> 00:27:18,000
So that means that the expected dividend payment

423
00:27:18,000 --> 00:27:21,000
and therefore also the forward price of the stock

424
00:27:21,000 --> 00:27:25,000
must be dependent on volatility.

425
00:27:25,000 --> 00:27:26,000
So that's annoying.

426
00:27:26,000 --> 00:27:29,000
But it's just, it's the price you have to live with

427
00:27:29,000 --> 00:27:33,000
if you want a model for dividend payment behavior

428
00:27:33,000 --> 00:27:36,000
that doesn't say that I'll pay this amount no matter

429
00:27:36,000 --> 00:27:39,000
if I have the money or not and build a model

430
00:27:39,000 --> 00:27:42,000
that also allows for negative stock prices and so forth.

431
00:27:42,000 --> 00:27:44,000
So you have to choose your poison.

432
00:27:44,000 --> 00:27:46,000
Doesn't really matter however what you pick

433
00:27:46,000 --> 00:27:48,000
because the approach I'm gonna show will accommodate

434
00:27:48,000 --> 00:27:51,000
everything but it will also allow you to switch

435
00:27:51,000 --> 00:27:54,000
into a dividend model that isn't completely crazy

436
00:27:54,000 --> 00:27:59,000
if you have say a longer dated or maybe a relatively low

437
00:28:00,000 --> 00:28:03,000
stock price relative to the projected dividends.

438
00:28:04,000 --> 00:28:05,000
Yeah, okay.

439
00:28:06,000 --> 00:28:08,000
So when you're in this kind of setting,

440
00:28:10,000 --> 00:28:12,000
so basically what we have here is we have a geometric

441
00:28:12,000 --> 00:28:16,000
Brownian motion and it kind of in between things

442
00:28:16,000 --> 00:28:18,000
and then you have some jumps.

443
00:28:18,000 --> 00:28:21,000
So it's quite natural in this setting to introduce

444
00:28:24,000 --> 00:28:26,000
to start looking at sort of densities.

445
00:28:26,000 --> 00:28:28,000
So that's what I'm gonna do here.

446
00:28:28,000 --> 00:28:31,000
I'll stay in this rational dividend policy class

447
00:28:31,000 --> 00:28:34,000
simply because and then I can define X

448
00:28:34,000 --> 00:28:36,000
as being the log of the stock price because I know

449
00:28:36,000 --> 00:28:39,000
the stock will not go below zero.

450
00:28:39,000 --> 00:28:42,000
If you look at the reference you'll see

451
00:28:42,000 --> 00:28:44,000
that's not a prerequisite.

452
00:28:44,000 --> 00:28:48,000
You can get around this without any pain.

453
00:28:48,000 --> 00:28:50,000
And I'm gonna say that I actually I know what the stock

454
00:28:50,000 --> 00:28:54,000
price is right after a dividend payment at TI.

455
00:28:54,000 --> 00:28:58,000
So if I know that then I'm gonna ask what can I say

456
00:28:58,000 --> 00:29:03,000
about the probability density of the dividend payment

457
00:29:05,000 --> 00:29:06,000
at TI?

458
00:29:06,000 --> 00:29:11,000
The log stock price one period ahead but just inside.

459
00:29:11,000 --> 00:29:15,000
So we are right after a dividend at TI and I want to say

460
00:29:15,000 --> 00:29:18,000
something about the transition density just before

461
00:29:18,000 --> 00:29:20,000
the next dividend.

462
00:29:20,000 --> 00:29:22,000
So I stay sort of inside.

463
00:29:22,000 --> 00:29:25,000
There's no jumps in this little interval.

464
00:29:25,000 --> 00:29:29,000
And in that case it's very easy to show that then the

465
00:29:29,000 --> 00:29:34,000
density of X, the value of X right before the next

466
00:29:38,000 --> 00:29:42,000
dividend date given that you know where you are right

467
00:29:42,000 --> 00:29:47,000
after sort of the previous is just Gaussian with some

468
00:29:47,000 --> 00:29:51,000
means and some volatility that is easy to compute

469
00:29:51,000 --> 00:29:54,000
straight off the geometric Brownian motion.

470
00:29:54,000 --> 00:29:56,000
So that's given on this slide.

471
00:29:56,000 --> 00:29:59,000
So shouldn't be surprising in between dividends when

472
00:29:59,000 --> 00:30:03,000
nothing is jumping everything is log normal so the log

473
00:30:03,000 --> 00:30:06,000
stock price is therefore normal or Gaussian.

474
00:30:08,000 --> 00:30:11,000
Okay so now we know that we have a density in between

475
00:30:11,000 --> 00:30:13,000
and I'm gonna start as a warm up here looking at European

476
00:30:13,000 --> 00:30:18,000
call options with the aim of getting to the American call.

477
00:30:18,000 --> 00:30:21,000
And then I'm just gonna so the European call is just the

478
00:30:21,000 --> 00:30:26,000
expected value of the call pay out at maturity and then

479
00:30:27,000 --> 00:30:30,000
if I want to do the expectation of time little c is just

480
00:30:30,000 --> 00:30:34,000
conditional on whatever the stock price is at time little c.

481
00:30:34,000 --> 00:30:38,000
So I get an expression here that depends on my stock price

482
00:30:38,000 --> 00:30:41,000
and my little c and it's just an expectation.

483
00:30:41,000 --> 00:30:45,000
Now I want a way to calculate that in particular I want to

484
00:30:45,000 --> 00:30:48,000
be nice to be able to calculate it at time zero so now

485
00:30:48,000 --> 00:30:52,000
what the call price is worth now right now.

486
00:30:52,000 --> 00:30:54,000
And notice that I removed discounting here

487
00:30:54,000 --> 00:30:56,000
just for simplicity.

488
00:30:57,000 --> 00:31:01,000
And this kind of so since this is an expectation it means

489
00:31:01,000 --> 00:31:05,000
that what I can do is by sort of iterated expectation is

490
00:31:05,000 --> 00:31:09,000
again say the call price at any time little c.

491
00:31:09,000 --> 00:31:13,000
If I know what the call price is at some time after little

492
00:31:13,000 --> 00:31:17,000
c and before maturity call price is just an expectation.

493
00:31:17,000 --> 00:31:20,000
So we have like a Martin scale condition here because I

494
00:31:20,000 --> 00:31:22,000
removed discounting.

495
00:31:22,000 --> 00:31:26,000
And I can write that out and say okay so this expectation

496
00:31:26,000 --> 00:31:30,000
here so in between dividend payments I can use this

497
00:31:30,000 --> 00:31:34,000
application here and just write that expectation as an

498
00:31:34,000 --> 00:31:39,000
interval so this expectation here in log space just becomes

499
00:31:39,000 --> 00:31:41,000
an interval of this type.

500
00:31:41,000 --> 00:31:46,000
I take the call price one period ahead but just before the

501
00:31:46,000 --> 00:31:50,000
dividend is paid and then I just integrate it against the

502
00:31:50,000 --> 00:31:54,000
density which is gout and that gives me the call the

503
00:31:54,000 --> 00:31:57,000
European call option price and log coordinates at time

504
00:31:57,000 --> 00:31:59,000
ti plus.

505
00:31:59,000 --> 00:32:04,000
So now I have a way of relating call prices inside the

506
00:32:04,000 --> 00:32:06,000
dividend payments.

507
00:32:06,000 --> 00:32:10,000
And then to get across the dividend payment I use a jump

508
00:32:10,000 --> 00:32:15,000
condition and that just says that call price just before

509
00:32:16,000 --> 00:32:21,000
the dividend is paid must equal the call price just

510
00:32:21,000 --> 00:32:25,000
after but you have to adjust you know that the stock is

511
00:32:25,000 --> 00:32:30,000
going to go down by the dividend so you just reduce the

512
00:32:30,000 --> 00:32:33,000
stock price amount on the right hand side.

513
00:32:33,000 --> 00:32:36,000
So then you end up with a jump condition at that.

514
00:32:36,000 --> 00:32:40,000
That relates sort of the little c here that ti plus one

515
00:32:40,000 --> 00:32:45,000
minus which is just before the dividend to the call price

516
00:32:46,000 --> 00:32:47,000
just after.

517
00:32:48,000 --> 00:32:53,000
And then I can take my expression 14 here and substitute

518
00:32:53,000 --> 00:32:58,000
in for the c part here this jump condition and now I get

519
00:32:58,000 --> 00:33:03,000
a way of relating prices at x dividend dates of ti plus

520
00:33:03,000 --> 00:33:07,000
and ti plus one plus and ti plus.

521
00:33:07,000 --> 00:33:10,000
So getting into notation here is quite an ordeal but I

522
00:33:10,000 --> 00:33:12,000
think I've got it more or less right.

523
00:33:12,000 --> 00:33:16,000
So now I have a relationship between call option prices

524
00:33:16,000 --> 00:33:20,000
at x dividend dates and it sort of sits there as a nice

525
00:33:20,000 --> 00:33:21,000
integral.

526
00:33:21,000 --> 00:33:26,000
The very last period this call option price here will be

527
00:33:26,000 --> 00:33:30,000
just be the value at maturity so I can actually execute

528
00:33:30,000 --> 00:33:32,000
that out and get a formula.

529
00:33:32,000 --> 00:33:35,000
So we start these intervals start with a formula and then

530
00:33:35,000 --> 00:33:38,000
you have to sort of integrate backwards.

531
00:33:38,000 --> 00:33:42,000
So that's kind of the scheme that is being I'm pitching

532
00:33:42,000 --> 00:33:47,000
here teeing up that you start with at the last dividend

533
00:33:47,000 --> 00:33:51,000
compute an integral based on the pay up and then you roll

534
00:33:51,000 --> 00:33:55,000
your way backwards in a series of integrals.

535
00:33:57,000 --> 00:34:00,000
So you can think of it a little bit like I find a different

536
00:34:00,000 --> 00:34:03,000
script but everything is now an integral space.

537
00:34:04,000 --> 00:34:08,000
So okay so that's the idea you iterate backwards through

538
00:34:08,000 --> 00:34:11,000
these integrals but then you have to evaluate these

539
00:34:11,000 --> 00:34:16,000
integrals numerically and that's what I'm so if I

540
00:34:16,000 --> 00:34:21,000
integral number 16 here I condensed the whole thing into

541
00:34:21,000 --> 00:34:26,000
a function f that's just written here and then I guess

542
00:34:26,000 --> 00:34:29,000
I basically have to compute things like this.

543
00:34:29,000 --> 00:34:33,000
So very simple function and then I have to integrate

544
00:34:33,000 --> 00:34:35,000
that against the density.

545
00:34:35,000 --> 00:34:37,000
How would I do that?

546
00:34:37,000 --> 00:34:40,000
You will use some kind of to get a performance method

547
00:34:40,000 --> 00:34:44,000
you would use a quadrature scheme that is performant.

548
00:34:44,000 --> 00:34:49,000
So not anything like nothing primitive nothing like you

549
00:34:49,000 --> 00:34:54,000
will see in beginner textbooks but you write find some

550
00:34:54,000 --> 00:34:58,000
really well performing quadrature rule and then you're

551
00:34:58,000 --> 00:35:01,000
gonna pick some source points you have to evaluate

552
00:35:01,000 --> 00:35:05,000
that's pick some values of e and then there are some weights

553
00:35:06,000 --> 00:35:09,000
and then all quadrature schemes will look something like

554
00:35:09,000 --> 00:35:13,000
this it's a bunch of weights times these functions here

555
00:35:13,000 --> 00:35:15,000
evaluated in a set of points.

556
00:35:15,000 --> 00:35:18,000
Now the choice of those points and the exact value of the

557
00:35:18,000 --> 00:35:21,000
weights that's sort of all in the sequence so some

558
00:35:21,000 --> 00:35:24,000
quadrature rules are much much better than others some are

559
00:35:24,000 --> 00:35:27,000
very simple some are very cool and sophisticated.

560
00:35:28,000 --> 00:35:30,000
But they all kind of look like this.

561
00:35:33,000 --> 00:35:37,000
And then you can do this so now you can do this by any

562
00:35:37,000 --> 00:35:41,000
value of x and now if you step back you'll need this for

563
00:35:41,000 --> 00:35:44,000
multiple x's because the previous slides as you roll

564
00:35:44,000 --> 00:35:47,000
through this will need something similar and then will

565
00:35:47,000 --> 00:35:51,000
definitely for this to be evaluated at a bunch of x.

566
00:35:51,000 --> 00:35:54,000
Ultimately you end up with sort of some slices with

567
00:35:54,000 --> 00:35:57,000
different points that you are looping backwards so it

568
00:35:57,000 --> 00:35:59,000
looks something like this.

569
00:35:59,000 --> 00:36:02,000
You have some sources that you set up and then you have

570
00:36:02,000 --> 00:36:06,000
some targets and in every instance for every target you

571
00:36:06,000 --> 00:36:08,000
have to do these weighted sums.

572
00:36:08,000 --> 00:36:12,000
So if you look at this if you count the number of

573
00:36:12,000 --> 00:36:15,000
connections you'll see this is a quadratic algorithm

574
00:36:15,000 --> 00:36:18,000
because for every target you end up with something that

575
00:36:18,000 --> 00:36:23,000
is order m here the number of sources you have to do that

576
00:36:23,000 --> 00:36:26,000
for every target so you end up with an order m squared

577
00:36:26,000 --> 00:36:29,000
algorithm if you do it naively.

578
00:36:29,000 --> 00:36:32,000
So it's a quadratic workload of this type of algorithm.

579
00:36:33,000 --> 00:36:37,000
That we don't want and of course you should think that

580
00:36:37,000 --> 00:36:41,000
what we are effectively doing is some type of convolution.

581
00:36:41,000 --> 00:36:44,000
So you should think maybe we can move this into convolution

582
00:36:44,000 --> 00:36:48,000
space and maybe use some kind of fast Fourier transform

583
00:36:48,000 --> 00:36:50,000
algorithm and that's true.

584
00:36:50,000 --> 00:36:53,000
The only problem is here is that because we're using a

585
00:36:53,000 --> 00:36:56,000
good quadrature rules these points are not equidistant

586
00:36:56,000 --> 00:36:58,000
space that we are looking at.

587
00:36:58,000 --> 00:37:01,000
They are far from equidistant space since that would be

588
00:37:01,000 --> 00:37:05,000
terrible but that means that a regular fast Fourier

589
00:37:05,000 --> 00:37:09,000
transform which requires equidistant spacing cannot be

590
00:37:09,000 --> 00:37:10,000
used.

591
00:37:10,000 --> 00:37:12,000
It will lead to a terrible scheme and you'll see a lot

592
00:37:12,000 --> 00:37:15,000
of FFT type schemes in the literature.

593
00:37:15,000 --> 00:37:16,000
They're actually all pretty bad.

594
00:37:16,000 --> 00:37:19,000
They look good but once you test them you see that they're

595
00:37:19,000 --> 00:37:22,000
slow and flaky and don't really work that well.

596
00:37:22,000 --> 00:37:25,000
You can use a non-uniform FFT.

597
00:37:25,000 --> 00:37:29,000
There's a reference to some work that I and Mark did on

598
00:37:29,000 --> 00:37:31,000
this complicated.

599
00:37:31,000 --> 00:37:34,000
To say the least non-uniform FFT is a step up in complexity

600
00:37:34,000 --> 00:37:38,000
but it can do this and the order m squared will go to

601
00:37:38,000 --> 00:37:40,000
order m log m.

602
00:37:40,000 --> 00:37:44,000
The branches of non-uniform FFT they said can handle

603
00:37:44,000 --> 00:37:47,000
processes that are far more complicated than geometric

604
00:37:47,000 --> 00:37:48,000
Brownian motions.

605
00:37:48,000 --> 00:37:50,000
Anything that has a characteristic function you can

606
00:37:50,000 --> 00:37:51,000
handle.

607
00:37:51,000 --> 00:37:55,000
But if you as we do here we have a Gaussian density you

608
00:37:55,000 --> 00:37:57,000
can do better than non-uniform FFT.

609
00:37:57,000 --> 00:38:00,000
You can use something called the fast Gauss transform

610
00:38:00,000 --> 00:38:04,000
which is a method that's designed specifically when

611
00:38:04,000 --> 00:38:07,000
you're looking at convolution over Gaussians.

612
00:38:07,000 --> 00:38:11,000
The fast Gauss transform was developed in one of the by

613
00:38:11,000 --> 00:38:15,000
Greencott and a bunch of other guys and a nice paper by

614
00:38:15,000 --> 00:38:20,000
Mark Brody and I think Yamamoto introduced this a long

615
00:38:20,000 --> 00:38:21,000
time ago to finance.

616
00:38:21,000 --> 00:38:23,000
For some reason it hasn't really caught on.

617
00:38:23,000 --> 00:38:26,000
I don't understand why it's brilliant method.

618
00:38:26,000 --> 00:38:28,000
And it basically the main idea is that if you have

619
00:38:28,000 --> 00:38:32,000
something that looks where you have these exponentials

620
00:38:32,000 --> 00:38:35,000
so it's basically a Gaussian convolution that you can

621
00:38:35,000 --> 00:38:43,000
reduce the effort from here I have mj target points and

622
00:38:43,000 --> 00:38:46,000
I have mk source points.

623
00:38:46,000 --> 00:38:50,000
Instead of doing this in order mk times mj you can do it

624
00:38:50,000 --> 00:38:54,000
in order mk plus mj which is remarkable.

625
00:38:54,000 --> 00:38:56,000
That's not even a long term there.

626
00:38:56,000 --> 00:39:00,000
It's so much faster to do this in this space.

627
00:39:00,000 --> 00:39:03,000
And this is perfect because the integrals that I've written

628
00:39:03,000 --> 00:39:07,000
up in the discretization are exactly in this form.

629
00:39:07,000 --> 00:39:10,000
So relative to some of the other algorithms you see out

630
00:39:10,000 --> 00:39:15,000
there by writing it like this you get this order n times

631
00:39:15,000 --> 00:39:18,000
n rather than order n times m squared.

632
00:39:18,000 --> 00:39:22,000
And since this is m is normally about 100 or thereabouts

633
00:39:22,000 --> 00:39:25,000
we're looking at two orders of magnitude gain.

634
00:39:25,000 --> 00:39:29,000
So by just switching into this clever way of doing it.

635
00:39:29,000 --> 00:39:33,000
All right so that's the basic idea is you discretize

636
00:39:33,000 --> 00:39:36,000
these sequential integrals and then you use the fast

637
00:39:36,000 --> 00:39:39,000
Gauss transform to execute it like thunder and lightning.

638
00:39:39,000 --> 00:39:43,000
You still have to define a quadrature rule and this turns

639
00:39:43,000 --> 00:39:46,000
out you need a scheme that can handle both the infinite

640
00:39:46,000 --> 00:39:49,000
domain and sort of half infinite domain for reasons that

641
00:39:49,000 --> 00:39:51,000
I'll mention in a second.

642
00:39:51,000 --> 00:39:54,000
We're gonna use the double exponential quadrature rules

643
00:39:54,000 --> 00:39:58,000
that Mark and I have used for a lot of applications.

644
00:39:58,000 --> 00:40:02,000
And there's a lot of good reasons for that.

645
00:40:02,000 --> 00:40:04,000
They're very straightforward to set up.

646
00:40:04,000 --> 00:40:06,000
They're much simpler than say a Gaussian quadrature.

647
00:40:07,000 --> 00:40:09,000
They're factually convergent.

648
00:40:09,000 --> 00:40:12,000
They are optimal in a certain cool way and they're also

649
00:40:12,000 --> 00:40:16,000
very robust in terms of dealing with singularities and

650
00:40:16,000 --> 00:40:19,000
whether the interval is half infinite or infinite

651
00:40:19,000 --> 00:40:23,000
or open closed as opposed to their schemes for all of them.

652
00:40:23,000 --> 00:40:25,000
And they have turned out at least in our experience to be

653
00:40:25,000 --> 00:40:28,000
fantastic for all finance applications.

654
00:40:30,000 --> 00:40:32,000
You'll see the recommendations we come up with.

655
00:40:32,000 --> 00:40:34,000
There are a couple of things that need to be considered here.

656
00:40:34,000 --> 00:40:39,000
One is that you want ultimately in a double exponential

657
00:40:39,000 --> 00:40:43,000
integration scheme you put a transformation on that makes

658
00:40:43,000 --> 00:40:46,000
everything decay double exponentially.

659
00:40:46,000 --> 00:40:51,000
So exponential decay where the decay itself is exponential.

660
00:40:51,000 --> 00:40:54,000
But in the integral we already had a Gaussian.

661
00:40:54,000 --> 00:40:58,000
So the Gaussian decays single exponentially so you have to

662
00:40:58,000 --> 00:41:01,000
be a little careful in some way when you pick the schemes

663
00:41:01,000 --> 00:41:06,000
to make sure you don't end up with a triple exponential

664
00:41:06,000 --> 00:41:08,000
scheme which is definitely not optimal.

665
00:41:08,000 --> 00:41:12,000
It might say so double exponential sounds good shouldn't

666
00:41:12,000 --> 00:41:15,000
triple exponential or quadruple exponential be even better.

667
00:41:15,000 --> 00:41:16,000
But it isn't.

668
00:41:16,000 --> 00:41:19,000
The optimality only works for double exponentials.

669
00:41:19,000 --> 00:41:21,000
So you have to be careful not destroying it.

670
00:41:21,000 --> 00:41:24,000
You also need to take into account that because of the

671
00:41:24,000 --> 00:41:29,000
dividends they will introduce kinks in some of these

672
00:41:29,000 --> 00:41:33,000
dividends specifications that I showed you they have kinks

673
00:41:33,000 --> 00:41:37,000
or discontinuities to avoid going through zero.

674
00:41:37,000 --> 00:41:39,000
You have to identify those and make sure you break the

675
00:41:39,000 --> 00:41:41,000
intervals up into segments.

676
00:41:41,000 --> 00:41:45,000
Otherwise if you don't you're gonna lose this super rapid

677
00:41:45,000 --> 00:41:47,000
spectral convergence.

678
00:41:47,000 --> 00:41:52,000
So anyway that is so the numerical results here I'm just

679
00:41:53,000 --> 00:41:54,000
gonna talk about it.

680
00:41:54,000 --> 00:41:58,000
If you use a contemporary implementation of our scouts

681
00:41:58,000 --> 00:42:01,000
transforms and not the stuff that was done back in the

682
00:42:01,000 --> 00:42:05,000
Brodie Yamamoto guys but if you use plane wave expansions

683
00:42:05,000 --> 00:42:09,000
rather than hermit expansion this stuff we can get

684
00:42:09,000 --> 00:42:13,000
something like 200,000 options per second per dividend

685
00:42:13,000 --> 00:42:14,000
intervals.

686
00:42:14,000 --> 00:42:18,000
So if you have a one year option with three dividend days

687
00:42:18,000 --> 00:42:23,000
which is about the average in the US you can do about

688
00:42:23,000 --> 00:42:26,000
50,000 options per second at a precision of 10 to the

689
00:42:26,000 --> 00:42:27,000
minus eight.

690
00:42:27,000 --> 00:42:30,000
If you don't want 10 to the minus eight we can do

691
00:42:30,000 --> 00:42:31,000
faster than that.

692
00:42:31,000 --> 00:42:34,000
So and this convergence is fractal so we double the effort

693
00:42:34,000 --> 00:42:38,000
we get twice as many significant efforts in precision

694
00:42:38,000 --> 00:42:39,000
digits in precision.

695
00:42:40,000 --> 00:42:43,000
So there's lots of extensions that can be done here.

696
00:42:43,000 --> 00:42:47,000
We can American put the dividends, noisy dividends so you

697
00:42:47,000 --> 00:42:49,000
can introduce dividend model that have noise.

698
00:42:49,000 --> 00:42:53,000
If you believe some of these models say we know for sure

699
00:42:53,000 --> 00:42:55,000
what the dividend is gonna be if you just tell us the

700
00:42:55,000 --> 00:42:58,000
stock price that's not realistic.

701
00:42:58,000 --> 00:43:00,000
But we can add noise to the dividends.

702
00:43:00,000 --> 00:43:04,000
We can do lack dividends so if the dividend is determined

703
00:43:04,000 --> 00:43:08,000
before it's announced before it is paid you can do

704
00:43:08,000 --> 00:43:12,000
non-zero borrow costs so if the drift stock is not R

705
00:43:12,000 --> 00:43:15,000
but you have dividends as well as a dividend yield

706
00:43:15,000 --> 00:43:18,000
which is a borrow cost and you can hand them to jumps

707
00:43:18,000 --> 00:43:21,000
and simple local volatility and so forth in this framework

708
00:43:21,000 --> 00:43:24,000
primarily through non-uniform FFT methods.

709
00:43:24,000 --> 00:43:28,000
Pros very fast, wide range of a realistic dividend

710
00:43:28,000 --> 00:43:31,000
formulation can be supported.

711
00:43:31,000 --> 00:43:33,000
You don't have to pin yourself down to something that's

712
00:43:33,000 --> 00:43:37,000
very simple because you wanna rely on some OPE formula

713
00:43:37,000 --> 00:43:38,000
for the Europeans.

714
00:43:39,000 --> 00:43:44,000
But we cannot handle local vol in this model and this one

715
00:43:44,000 --> 00:43:47,000
can become computationally challenging for American puts.

716
00:43:47,000 --> 00:43:51,000
It's really good at the call and it's very good for the

717
00:43:51,000 --> 00:43:54,000
put but can sometimes be a little slow.

718
00:43:54,000 --> 00:43:57,000
Still very competitive though and super precise.

719
00:43:59,000 --> 00:44:03,000
Last topic to just cover what we have not been able to do.

720
00:44:03,000 --> 00:44:06,000
What is eluding us at the moment?

721
00:44:06,000 --> 00:44:09,000
And this is called new tricks for finite differences.

722
00:44:09,000 --> 00:44:12,000
You can see a bunch of references here about this.

723
00:44:13,000 --> 00:44:15,000
So here's the basic messages.

724
00:44:15,000 --> 00:44:18,000
If possible you should use an integral method.

725
00:44:18,000 --> 00:44:20,000
So that's one of the two methods I mentioned before.

726
00:44:20,000 --> 00:44:24,000
Either an integral around the boundary or an integration

727
00:44:24,000 --> 00:44:26,000
based convolution method.

728
00:44:26,000 --> 00:44:30,000
These are accurate, stable, fast converging, smooth,

729
00:44:30,000 --> 00:44:33,000
easy to deal with in general.

730
00:44:33,000 --> 00:44:38,000
No surprises, no issues rounding errors, nothing can go

731
00:44:38,000 --> 00:44:41,000
wrong if you set them up well.

732
00:44:41,000 --> 00:44:43,000
But they have limitations.

733
00:44:43,000 --> 00:44:49,000
In particular they do require some orderliness in the

734
00:44:49,000 --> 00:44:52,000
process, namely you should have either the characteristic

735
00:44:52,000 --> 00:44:56,000
function known or the density known outright.

736
00:44:56,000 --> 00:44:58,000
And you should ideally also know what European

737
00:44:58,000 --> 00:45:00,000
option prices are.

738
00:45:00,000 --> 00:45:05,000
So as I mentioned Black-Scholes like dynamics are sort

739
00:45:05,000 --> 00:45:09,000
of, that's still the bread and butter for simple American

740
00:45:09,000 --> 00:45:11,000
option pricing in the existing market.

741
00:45:11,000 --> 00:45:14,000
But you could also price Americans using these local

742
00:45:14,000 --> 00:45:16,000
volatility models.

743
00:45:16,000 --> 00:45:19,000
And this is normally a non-parametric local volatility

744
00:45:19,000 --> 00:45:23,000
model so they evolve here as a function of both time and

745
00:45:23,000 --> 00:45:27,000
stock price but not a particularly smooth or well behaved.

746
00:45:27,000 --> 00:45:30,000
If you have something like that it's very hard to write

747
00:45:30,000 --> 00:45:32,000
down anything analytical.

748
00:45:33,000 --> 00:45:35,000
And then you have to look at something else.

749
00:45:35,000 --> 00:45:38,000
And this is when you can either do Monte Carlo simulation

750
00:45:38,000 --> 00:45:42,000
or you do a lattice method where you discretize the process

751
00:45:42,000 --> 00:45:44,000
and stop it on a lattice.

752
00:45:45,000 --> 00:45:48,000
The two most common lattices, lattice methods are the

753
00:45:48,000 --> 00:45:52,000
binomial tree or the finite differences.

754
00:45:52,000 --> 00:45:54,000
Both have been deployed since the 70s.

755
00:45:56,000 --> 00:46:00,000
In practice, in theory, the binomial tree should have been

756
00:46:02,000 --> 00:46:05,000
retired a long time ago, should be resting in the grave

757
00:46:05,000 --> 00:46:07,000
we got but it doesn't.

758
00:46:07,000 --> 00:46:11,000
It's still very much in use and sometimes better

759
00:46:11,000 --> 00:46:13,000
to find out differences.

760
00:46:13,000 --> 00:46:18,000
Even though it has inflexible note placement rules,

761
00:46:20,000 --> 00:46:23,000
you have to do a lot of surgery to make it so that

762
00:46:23,000 --> 00:46:25,000
to put the notes wherever you want.

763
00:46:25,000 --> 00:46:28,000
It's generally full convergence.

764
00:46:28,000 --> 00:46:30,000
This is a first order method and if you're not careful

765
00:46:30,000 --> 00:46:33,000
you can get odd even effects and so forth.

766
00:46:33,000 --> 00:46:37,000
In particular this first order convergence is not great

767
00:46:37,000 --> 00:46:40,000
because there are many of the finite difference methods

768
00:46:40,000 --> 00:46:43,000
that are second order convergence and with that I mean

769
00:46:43,000 --> 00:46:46,000
to take more and more time steps you'll get second order

770
00:46:46,000 --> 00:46:48,000
convergence in a finite difference method but not in

771
00:46:48,000 --> 00:46:50,000
a binomial tree.

772
00:46:50,000 --> 00:46:54,000
But yet the binomial methods are there in practice.

773
00:46:54,000 --> 00:46:56,000
One reason is they're easy to implement.

774
00:46:56,000 --> 00:46:59,000
The other reason is they are fast.

775
00:46:59,000 --> 00:47:01,000
Even if they're not really accurate, they don't converge

776
00:47:01,000 --> 00:47:04,000
well maybe they're sort of fast enough in the sense that

777
00:47:04,000 --> 00:47:07,000
maybe they get that one cent accuracy or something is

778
00:47:07,000 --> 00:47:09,000
good enough or something like that.

779
00:47:09,000 --> 00:47:12,000
And there's also a lot of tricks that you can do to make

780
00:47:12,000 --> 00:47:15,000
the binomial trees better that people that started out

781
00:47:15,000 --> 00:47:17,000
maybe with a simple binomial tree they've sort of been

782
00:47:17,000 --> 00:47:19,000
improving them.

783
00:47:19,000 --> 00:47:22,000
But the reason I want to look at here and that is that

784
00:47:22,000 --> 00:47:26,000
the main composition to binomial trees mainly finite

785
00:47:26,000 --> 00:47:29,000
difference methods are not doing all that great for

786
00:47:29,000 --> 00:47:31,000
American options if you take a look at them.

787
00:47:31,000 --> 00:47:33,000
They are harder to implement.

788
00:47:33,000 --> 00:47:35,000
They have a higher computational cost for a given number

789
00:47:35,000 --> 00:47:37,000
of time steps.

790
00:47:37,000 --> 00:47:39,000
The convergence is not great for American options in

791
00:47:39,000 --> 00:47:43,000
practice in the sense of use oscillating Greeks.

792
00:47:43,000 --> 00:47:46,000
So it doesn't look like it's a great contender here.

793
00:47:46,000 --> 00:47:48,000
But in the next few slides I'll show you how you can fix

794
00:47:48,000 --> 00:47:50,000
all these things.

795
00:47:50,000 --> 00:47:52,000
And then you can come up with a finite difference method

796
00:47:52,000 --> 00:47:57,000
that is fastly converging, smooth, et cetera, et cetera.

797
00:47:57,000 --> 00:47:59,000
And that's what we're going to do here.

798
00:47:59,000 --> 00:48:02,000
I'm going to look at the Black-Scholes model again.

799
00:48:02,000 --> 00:48:04,000
This is not one you want to use this model again.

800
00:48:04,000 --> 00:48:06,000
If you have a model like this, use one of the other two

801
00:48:06,000 --> 00:48:07,000
approaches.

802
00:48:07,000 --> 00:48:10,000
But I'm going to use this.

803
00:48:10,000 --> 00:48:13,000
You really want to then ultimately replace this with

804
00:48:13,000 --> 00:48:15,000
something else I'm going to look at because that's where

805
00:48:15,000 --> 00:48:17,000
all the benchmarks are and the literature and so forth.

806
00:48:17,000 --> 00:48:18,000
So I'm going to look at it.

807
00:48:18,000 --> 00:48:21,000
I'm going to look at the code option again.

808
00:48:21,000 --> 00:48:23,000
And I'm going to again have some kind of boundary in S

809
00:48:23,000 --> 00:48:27,000
space that I know separates exercise from non-exercise.

810
00:48:27,000 --> 00:48:30,000
So this is the same setup as we had before.

811
00:48:30,000 --> 00:48:34,000
I'll move into log space and that gives me this so that

812
00:48:34,000 --> 00:48:39,000
I have a PDE that I solve when I am in the

813
00:48:40,000 --> 00:48:43,000
continuation region and then below that the value

814
00:48:43,000 --> 00:48:47,000
function of the put is just equal to the payout function.

815
00:48:47,000 --> 00:48:51,000
So little x's here just means that my,

816
00:48:51,000 --> 00:48:54,000
and everything is restated in x-coordinate,

817
00:48:54,000 --> 00:48:56,000
so log coordinates here.

818
00:48:56,000 --> 00:49:01,000
And here's the partial differential equation operator.

819
00:49:01,000 --> 00:49:05,000
So that's basically the same as I said before.

820
00:49:05,000 --> 00:49:08,000
The idea of finite difference script is to take a PDE

821
00:49:08,000 --> 00:49:12,000
such as this one and replace everywhere you see the

822
00:49:12,000 --> 00:49:17,000
differentials both in time and in space,

823
00:49:17,000 --> 00:49:20,000
replace them by finite difference approximations.

824
00:49:20,000 --> 00:49:23,000
Something like for instance this space,

825
00:49:23,000 --> 00:49:27,000
this operator L sub x is approximately equal to a

826
00:49:27,000 --> 00:49:30,000
discrete operator where you just move,

827
00:49:30,000 --> 00:49:35,000
whenever it says dF dx, you just sort of do f of

828
00:49:36,000 --> 00:49:40,000
x plus delta minus f of x divided by delta x,

829
00:49:40,000 --> 00:49:41,000
something like this.

830
00:49:41,000 --> 00:49:43,000
And then you try to center things.

831
00:49:43,000 --> 00:49:46,000
So basically finite difference coefficients

832
00:49:47,000 --> 00:49:50,000
rather than real differentials.

833
00:49:50,000 --> 00:49:54,000
Then you write that down and then you say I'm gonna use

834
00:49:54,000 --> 00:49:55,000
that instead.

835
00:49:55,000 --> 00:49:59,000
But that leads to a scheme where this operator here

836
00:49:59,000 --> 00:50:02,000
will be written as a sum of three weights,

837
00:50:02,000 --> 00:50:06,000
so alpha, beta, and gamma being the weights of

838
00:50:08,000 --> 00:50:12,000
the function f but evaluated at x points that are shifted

839
00:50:12,000 --> 00:50:16,000
one delta x up and one delta x down.

840
00:50:16,000 --> 00:50:18,000
So I don't have to get something that relates

841
00:50:18,000 --> 00:50:19,000
three points together.

842
00:50:19,000 --> 00:50:21,000
So much simpler than a differential,

843
00:50:21,000 --> 00:50:24,000
this originates out of the,

844
00:50:25,000 --> 00:50:27,000
you write it down as difference equations

845
00:50:27,000 --> 00:50:30,000
and then you get a simple system like this.

846
00:50:30,000 --> 00:50:33,000
And then you can do the same for the time derivative.

847
00:50:34,000 --> 00:50:37,000
And then when you write the PDE down, this one,

848
00:50:37,000 --> 00:50:41,000
so you take the time derivative will have its finite

849
00:50:41,000 --> 00:50:44,000
difference approximation and so will all the spatial

850
00:50:44,000 --> 00:50:45,000
derivatives.

851
00:50:45,000 --> 00:50:48,000
And then you get an equation like 28.

852
00:50:48,000 --> 00:50:51,000
You'll see I've introduced a parameter theta.

853
00:50:51,000 --> 00:50:55,000
This is a very classical way of discretizing.

854
00:50:55,000 --> 00:51:00,000
It simply chooses where in time,

855
00:51:00,000 --> 00:51:03,000
so if you're operating on an interval from tau prime

856
00:51:03,000 --> 00:51:06,000
to time prime cross delta t, then the spatial operator

857
00:51:06,000 --> 00:51:10,000
can be done either at t prime or at t prime plus delta t.

858
00:51:10,000 --> 00:51:13,000
And in the theta scheme you weight them by this

859
00:51:13,000 --> 00:51:14,000
parameter theta.

860
00:51:15,000 --> 00:51:17,000
And depending on which one you choose,

861
00:51:17,000 --> 00:51:19,000
theta one is the fully implicit scheme,

862
00:51:19,000 --> 00:51:22,000
theta half is the Crank-Nicholson,

863
00:51:22,000 --> 00:51:25,000
and theta equal to zero is fully explicit.

864
00:51:25,000 --> 00:51:27,000
The fully implicit scheme is nice and smooth,

865
00:51:27,000 --> 00:51:30,000
but doesn't converge very well in the time domain.

866
00:51:30,000 --> 00:51:32,000
Crank-Nicholson is the one we really want to use

867
00:51:32,000 --> 00:51:35,000
because it's second order conversion in time,

868
00:51:35,000 --> 00:51:39,000
so if you add more time nodes, it will converge faster.

869
00:51:39,000 --> 00:51:42,000
The fully explicit is not something I would recommend

870
00:51:42,000 --> 00:51:45,000
because it's too bond stable in general unless you have

871
00:51:45,000 --> 00:51:46,000
a lot of time steps.

872
00:51:48,000 --> 00:51:51,000
And that's when you arrange these equations on a grid.

873
00:51:51,000 --> 00:51:55,000
Then you basically get a system of matrix equations

874
00:51:55,000 --> 00:51:59,000
where you have a tri-diagonal system with these alpha,

875
00:51:59,000 --> 00:52:03,000
beta, gamma, and then you can sort of step through a grid

876
00:52:03,000 --> 00:52:06,000
solving matrix equations with each step.

877
00:52:06,000 --> 00:52:08,000
So you start at the known boundary and then you step

878
00:52:08,000 --> 00:52:11,000
your way forward in tall space, which is actually

879
00:52:11,000 --> 00:52:15,000
backward in calendar time space, solving nice

880
00:52:15,000 --> 00:52:17,000
tri-diagonal system.

881
00:52:17,000 --> 00:52:22,000
So it leads to an easy to compute system because

882
00:52:23,000 --> 00:52:26,000
inverting these tri-diagonal matrices can be done

883
00:52:26,000 --> 00:52:30,000
at linear complexity using LUD composition.

884
00:52:31,000 --> 00:52:34,000
And if you have n time steps, then the full work is

885
00:52:34,000 --> 00:52:36,000
order n times m.

886
00:52:36,000 --> 00:52:41,000
So that is similar to the work effort of the convolution

887
00:52:41,000 --> 00:52:44,000
method, the only difference is here that the convolution

888
00:52:44,000 --> 00:52:49,000
method is kind of exact, whereas this is discretized.

889
00:52:50,000 --> 00:52:53,000
So they look the same, but they're not the same.

890
00:52:53,000 --> 00:52:56,000
One is the discretization that is much coarser.

891
00:52:56,000 --> 00:53:00,000
So another thing to notice is in the way you set up

892
00:53:00,000 --> 00:53:05,000
equation 28 is that you end up when you're looking at

893
00:53:05,000 --> 00:53:10,000
a particular sort of node here, tau i comma xi in the grid,

894
00:53:11,000 --> 00:53:14,000
you'll see that you actually, that function will end up

895
00:53:14,000 --> 00:53:18,000
depending on sort of the six neighboring points

896
00:53:18,000 --> 00:53:20,000
in this particular manner here.

897
00:53:20,000 --> 00:53:24,000
And then once you blow that up to the entire grid,

898
00:53:24,000 --> 00:53:26,000
that's how you end up with a matrix equation.

899
00:53:26,000 --> 00:53:29,000
This flow here, we'll see it in a second.

900
00:53:31,000 --> 00:53:35,000
So here is LUD composition.

901
00:53:35,000 --> 00:53:39,000
High level, what that involves is you do sweep upwards

902
00:53:39,000 --> 00:53:42,000
and then you compute some constants and then you sweep

903
00:53:42,000 --> 00:53:45,000
downwards to complete the calculations.

904
00:53:47,000 --> 00:53:48,000
So that's how it works.

905
00:53:48,000 --> 00:53:51,000
You basically compute, sweep up in the grid,

906
00:53:51,000 --> 00:53:53,000
and then you have a bunch of constants and then you

907
00:53:53,000 --> 00:53:56,000
iterate your way back and that solves the matrix equations.

908
00:53:56,000 --> 00:53:59,000
UL decomposition is less standard,

909
00:53:59,000 --> 00:54:00,000
but it works the other way.

910
00:54:00,000 --> 00:54:04,000
The first sweep is downward and the second sweep is upward.

911
00:54:04,000 --> 00:54:07,000
So now what I've shown you is a way to solve,

912
00:54:07,000 --> 00:54:08,000
define a difference grid.

913
00:54:09,000 --> 00:54:12,000
You need some way to capture the early exercise.

914
00:54:12,000 --> 00:54:15,000
The simplest solution here is basically to use

915
00:54:15,000 --> 00:54:18,000
that Bem-Uden approximation where you say, okay,

916
00:54:18,000 --> 00:54:21,000
I'm gonna try to just assume this is Bem-Uden.

917
00:54:21,000 --> 00:54:24,000
So what I do is in my grid, I roll one step

918
00:54:25,000 --> 00:54:29,000
and then I take and I assume that that's kind of the,

919
00:54:29,000 --> 00:54:33,000
I max that over the payout.

920
00:54:33,000 --> 00:54:35,000
So that's pretty much what you do in a,

921
00:54:35,000 --> 00:54:37,000
you kind of take one step back and say,

922
00:54:37,000 --> 00:54:39,000
oh, that's my holding value and then I max the whole thing

923
00:54:39,000 --> 00:54:41,000
against the payout.

924
00:54:41,000 --> 00:54:44,000
So that's written out here is how you would do that.

925
00:54:44,000 --> 00:54:47,000
That is terrible because for reasons I told you

926
00:54:47,000 --> 00:54:50,000
that Bem-Uden will approximate only linear

927
00:54:50,000 --> 00:54:51,000
in the time step.

928
00:54:51,000 --> 00:54:55,000
So no matter what you do, this will destroy the convergence.

929
00:54:55,000 --> 00:54:57,000
So even if you think you are using something good

930
00:54:57,000 --> 00:54:59,000
with Frank Nicholson doing this,

931
00:54:59,000 --> 00:55:01,000
will ruin the convergence step.

932
00:55:01,000 --> 00:55:04,000
So we can do better than that.

933
00:55:04,000 --> 00:55:06,000
There's a lot of methods that you can do here.

934
00:55:07,000 --> 00:55:11,000
That are listed here, policy, duration, PSOR and so forth.

935
00:55:11,000 --> 00:55:14,440
They all generally,

936
00:55:17,000 --> 00:55:20,000
pretty involved, but there's a simple method to do it.

937
00:55:20,000 --> 00:55:23,000
And that is called the Brennan-Waltz algorithm.

938
00:55:23,000 --> 00:55:28,000
It does, basically you do a standard UL downwards step.

939
00:55:28,000 --> 00:55:31,000
So you do the sweep down and then you start

940
00:55:31,000 --> 00:55:34,000
as you roll back up, you start deploying the max

941
00:55:34,000 --> 00:55:35,000
inside the loop.

942
00:55:35,000 --> 00:55:37,000
So you don't go up and down and then max.

943
00:55:37,000 --> 00:55:42,000
You go down and then you start rolling in the max.

944
00:55:42,000 --> 00:55:45,000
This turns out to make all the difference.

945
00:55:45,000 --> 00:55:47,000
And as it turns out, trick number one here

946
00:55:47,000 --> 00:55:51,000
is that this algorithm can be sped up quite a lot.

947
00:55:51,000 --> 00:55:53,000
I'll show you here how it works in.

948
00:55:53,000 --> 00:55:55,000
So this is the explicit method.

949
00:55:55,000 --> 00:55:57,000
You go up, down and max.

950
00:55:57,000 --> 00:56:00,000
The classic Brennan-Waltz, you go down

951
00:56:00,000 --> 00:56:03,000
and then you go up, but you start doing the max.

952
00:56:03,000 --> 00:56:08,000
The new trick that I'm advocating is that you,

953
00:56:08,000 --> 00:56:10,000
as you sweep down, you actually,

954
00:56:10,000 --> 00:56:14,000
there's a way to find out where this max operation

955
00:56:14,000 --> 00:56:15,000
ceases to work.

956
00:56:15,000 --> 00:56:19,000
So you basically, there's a point where these maxes

957
00:56:19,000 --> 00:56:24,000
will identify, okay, now I am out of the exercise region.

958
00:56:25,000 --> 00:56:28,000
You don't have to go all the way down to find that.

959
00:56:28,000 --> 00:56:31,000
So you can stop and then you can roll up here

960
00:56:31,000 --> 00:56:34,000
and all the values in this below here,

961
00:56:34,000 --> 00:56:35,000
you don't have to compute them

962
00:56:35,000 --> 00:56:37,000
because they're in the exercise region.

963
00:56:37,000 --> 00:56:39,000
You can just fill in the exercise value.

964
00:56:39,000 --> 00:56:42,000
So this on average saves you about half of the time

965
00:56:42,000 --> 00:56:43,000
by doing this.

966
00:56:43,000 --> 00:56:46,000
I'm not sure why people haven't not advocated this,

967
00:56:46,000 --> 00:56:49,000
but right there you cut,

968
00:56:49,000 --> 00:56:52,000
so you factor up two out of the whole thing,

969
00:56:52,000 --> 00:56:54,000
but it's doing it this way.

970
00:56:54,000 --> 00:56:58,000
Here's a little test case where I try to run a test case

971
00:56:58,000 --> 00:57:01,000
and then I see a variety of test cases

972
00:57:01,000 --> 00:57:03,000
where I start with an implicit scheme

973
00:57:03,000 --> 00:57:07,000
and then I use like a bad exercise strategy and so forth.

974
00:57:07,000 --> 00:57:11,000
The most interesting thing to notice on this is

975
00:57:11,000 --> 00:57:14,000
most of these graphs are slope one.

976
00:57:14,000 --> 00:57:17,000
The one that I hope would be slope two down,

977
00:57:17,000 --> 00:57:19,000
so second order convergence,

978
00:57:19,000 --> 00:57:21,000
is the one where I use a Crank-Nicholson

979
00:57:21,000 --> 00:57:24,000
and I use the fancy fast Brennan-Schwarz.

980
00:57:24,000 --> 00:57:27,000
It isn't, it's slope 1.4 downward.

981
00:57:28,000 --> 00:57:31,000
So that's a bar, my start stop is in better convergence

982
00:57:31,000 --> 00:57:36,000
than the other methods, but it isn't a slope of two.

983
00:57:36,000 --> 00:57:39,000
And also if I look at the estimated exercise boundary

984
00:57:39,000 --> 00:57:41,000
that comes out of grid C,

985
00:57:41,000 --> 00:57:43,000
I have the exact boundary in red

986
00:57:43,000 --> 00:57:47,000
and I'll see that the sort of average size

987
00:57:47,000 --> 00:57:48,000
find a difference grid,

988
00:57:48,000 --> 00:57:50,000
I get a very choppy estimate of the exercise

989
00:57:50,000 --> 00:57:52,000
just because of discretization effects.

990
00:57:52,000 --> 00:57:55,000
And it's particularly bad in the short term.

991
00:57:56,000 --> 00:57:59,000
And if I look at the gamma that comes out of this method

992
00:57:59,000 --> 00:58:01,000
that I thought was so great, it's really bad.

993
00:58:01,000 --> 00:58:03,000
If you look at it, that's the gamma,

994
00:58:03,000 --> 00:58:05,000
it's like a stormy sea.

995
00:58:05,000 --> 00:58:06,000
And here's another slice,

996
00:58:06,000 --> 00:58:09,000
it's very typical of Crank-Nicholson methods.

997
00:58:09,000 --> 00:58:12,000
So here the problems are listed here.

998
00:58:12,000 --> 00:58:13,000
I don't get second order convergence,

999
00:58:13,000 --> 00:58:16,000
I don't resolve the exercise boundary.

1000
00:58:16,000 --> 00:58:19,000
The gamma is terrible and overall doesn't look so great

1001
00:58:19,000 --> 00:58:22,000
relative to binomial trees.

1002
00:58:22,000 --> 00:58:24,000
But they can all be fixed.

1003
00:58:24,000 --> 00:58:26,000
The first fix is very simple.

1004
00:58:26,000 --> 00:58:29,000
Move into a power transformation.

1005
00:58:29,000 --> 00:58:31,000
So instead of using an equidistant grid,

1006
00:58:31,000 --> 00:58:34,000
move into a grid that is spaced

1007
00:58:34,000 --> 00:58:37,000
according to some kind of power law,

1008
00:58:37,000 --> 00:58:39,000
tall to a power less than one.

1009
00:58:39,000 --> 00:58:43,000
And something like a half is good if you do that.

1010
00:58:43,000 --> 00:58:46,000
And the reason for that is that the exercise boundary

1011
00:58:46,000 --> 00:58:48,000
is known as we have this big swing

1012
00:58:48,000 --> 00:58:51,000
as you get close to maturity or close to zero

1013
00:58:51,000 --> 00:58:53,000
in tall space.

1014
00:58:53,000 --> 00:58:58,000
So that is because it behaves almost like a square root.

1015
00:58:58,000 --> 00:59:01,000
So you can limit that by using a power transformation

1016
00:59:01,000 --> 00:59:02,000
that's to a different spacing.

1017
00:59:02,000 --> 00:59:05,000
So you put more spaces in the beginning of the grid,

1018
00:59:05,000 --> 00:59:07,000
around where there's a lot of movement,

1019
00:59:07,000 --> 00:59:10,000
and that's, as it turns out, that fixes that.

1020
00:59:10,000 --> 00:59:12,000
So here's if I just do that,

1021
00:59:12,000 --> 00:59:15,000
and suddenly you'll see I can get slopes

1022
00:59:15,000 --> 00:59:17,000
that are actually all the way down to minus three,

1023
00:59:17,000 --> 00:59:19,000
which is better than what I hoped for,

1024
00:59:19,000 --> 00:59:22,000
which was minus two.

1025
00:59:22,000 --> 00:59:23,000
So that's just doing that.

1026
00:59:23,000 --> 00:59:27,000
And the other is to try to estimate the exercise boundary

1027
00:59:27,000 --> 00:59:30,000
to subgrid position as you are,

1028
00:59:30,000 --> 00:59:32,000
instead of having these sort of discretized things,

1029
00:59:32,000 --> 00:59:35,000
there are ways you can do inside to find a difference

1030
00:59:35,000 --> 00:59:37,000
as you run the method to discover,

1031
00:59:37,000 --> 00:59:39,000
to find where it actually lies,

1032
00:59:39,000 --> 00:59:42,000
and very often it is in between points.

1033
00:59:42,000 --> 00:59:44,000
Very easy to do, no extra work,

1034
00:59:44,000 --> 00:59:46,000
but it does mean you can locate it.

1035
00:59:46,000 --> 00:59:48,000
You'll see in the paper how to do it,

1036
00:59:48,000 --> 00:59:50,000
but it's basically just an interpolation.

1037
00:59:51,000 --> 00:59:54,000
And here is, the green one is the old method

1038
00:59:54,000 --> 00:59:56,000
before I tried this,

1039
00:59:56,000 --> 01:00:01,000
and the black one is after I do this interpolation.

1040
01:00:01,000 --> 01:00:03,000
Now you can see even in the shorthand

1041
01:00:03,000 --> 01:00:04,000
where you have a lot of movement,

1042
01:00:04,000 --> 01:00:08,000
I now track it because I've done interpolation

1043
01:00:08,000 --> 01:00:10,000
and I've done square root spacing.

1044
01:00:10,000 --> 01:00:13,000
Now I'm resolving that really well.

1045
01:00:13,000 --> 01:00:15,000
And then there's the gamma noise,

1046
01:00:15,000 --> 01:00:17,000
which is the most problematic part.

1047
01:00:17,000 --> 01:00:19,000
I'm not gonna spend a lot of time on it,

1048
01:00:19,000 --> 01:00:22,000
but the basic idea is here to,

1049
01:00:22,000 --> 01:00:24,000
it originates because when I'm trying

1050
01:00:24,000 --> 01:00:26,000
to at a particular point in time

1051
01:00:26,000 --> 01:00:29,000
to apply this finite difference grid,

1052
01:00:29,000 --> 01:00:32,000
I end up with this sort of six point flow,

1053
01:00:32,000 --> 01:00:34,000
and I start having dependencies.

1054
01:00:34,000 --> 01:00:36,000
When I'm above the exercise value,

1055
01:00:36,000 --> 01:00:40,000
I'll start dipping below it one time like before.

1056
01:00:40,000 --> 01:00:42,000
And that means that when it comes to the gamma,

1057
01:00:42,000 --> 01:00:45,000
you're gonna see a lot of bad effects.

1058
01:00:45,000 --> 01:00:47,000
If you're crossing over the gamma,

1059
01:00:47,000 --> 01:00:50,000
the gamma is discontinuous at the boundary, as it turns out,

1060
01:00:50,000 --> 01:00:53,000
and when I do this stuff, I'm in trouble

1061
01:00:53,000 --> 01:00:56,000
because I start applying the PD at a point

1062
01:00:56,000 --> 01:00:57,000
where it shouldn't be used,

1063
01:00:57,000 --> 01:01:02,000
and I'm dipping over a singularity or discontinuity.

1064
01:01:02,000 --> 01:01:05,000
I can avoid that, and there's a little involved

1065
01:01:05,000 --> 01:01:09,000
how to do it, but you identify a point

1066
01:01:09,000 --> 01:01:11,000
if you know where you are here,

1067
01:01:11,000 --> 01:01:13,000
and there you identify the point that says

1068
01:01:13,000 --> 01:01:15,000
this is right where I'm gonna,

1069
01:01:15,000 --> 01:01:18,000
at this level of X given that Y is gonna cross

1070
01:01:18,000 --> 01:01:20,000
the exercise boundary, and then you rewrite

1071
01:01:20,000 --> 01:01:25,000
the discretization and you use a particular rule,

1072
01:01:25,000 --> 01:01:27,000
a particular known property of points

1073
01:01:27,000 --> 01:01:29,000
that are right at the exercise boundary,

1074
01:01:29,000 --> 01:01:31,000
then you actually get a modification

1075
01:01:31,000 --> 01:01:33,000
of the difference scheme of points,

1076
01:01:33,000 --> 01:01:36,000
all the points that sort of dip into something

1077
01:01:36,000 --> 01:01:39,000
you're gonna modify to find a difference grid locally,

1078
01:01:39,000 --> 01:01:44,000
and then you avoid spilling into it, and that will fix it.

1079
01:01:44,000 --> 01:01:46,000
And here's the gamma with that,

1080
01:01:46,000 --> 01:01:47,000
and it takes no time as well.

1081
01:01:47,000 --> 01:01:49,000
All of these are little little things

1082
01:01:49,000 --> 01:01:51,000
that you're doing a defined difference grid,

1083
01:01:51,000 --> 01:01:54,000
and none of them add up to adding more time,

1084
01:01:54,000 --> 01:01:56,000
and it fixes the problems.

1085
01:01:56,000 --> 01:01:58,000
Another way you can actually save time

1086
01:01:58,000 --> 01:02:01,000
is to do one final thing here,

1087
01:02:01,000 --> 01:02:02,000
and that is a finite difference grid

1088
01:02:02,000 --> 01:02:05,000
normally sits in a rectangle.

1089
01:02:06,000 --> 01:02:09,000
But there are parts of it where you're wasting time.

1090
01:02:09,000 --> 01:02:12,000
For instance, if you have the exercise boundary,

1091
01:02:12,000 --> 01:02:15,000
we outline first a way to avoid ever going

1092
01:02:15,000 --> 01:02:17,000
below the exercise boundary.

1093
01:02:17,000 --> 01:02:20,000
The scheme will stop once it sees it.

1094
01:02:20,000 --> 01:02:22,000
So there's a good chunk that you're not gonna

1095
01:02:22,000 --> 01:02:24,000
go underneath at all,

1096
01:02:24,000 --> 01:02:26,000
because you can stop the finite difference grid.

1097
01:02:26,000 --> 01:02:29,000
Then there are parts of it that are statistically irrelevant.

1098
01:02:29,000 --> 01:02:33,000
Much like a binomial tree is like a triangle,

1099
01:02:33,000 --> 01:02:35,000
there are pieces of the finite difference grid

1100
01:02:35,000 --> 01:02:37,000
you can log off.

1101
01:02:37,000 --> 01:02:39,000
And then there are pieces where there's no gamma,

1102
01:02:39,000 --> 01:02:41,000
which is this piece up here,

1103
01:02:41,000 --> 01:02:44,000
where the option is for all practical purposes,

1104
01:02:44,000 --> 01:02:45,000
a straight line.

1105
01:02:45,000 --> 01:02:47,000
If you log off all this,

1106
01:02:47,000 --> 01:02:49,000
you're left with this little sliver here in the middle,

1107
01:02:49,000 --> 01:02:51,000
and that's where you solve it.

1108
01:02:51,000 --> 01:02:53,000
So now this alone can chop off

1109
01:02:53,000 --> 01:02:56,000
a lot more time as well, make it faster.

1110
01:02:56,000 --> 01:02:58,000
And this numerical performance,

1111
01:02:58,000 --> 01:03:01,000
I'm comparing it against five,

1112
01:03:01,000 --> 01:03:03,000
which is a finite difference grid method

1113
01:03:03,000 --> 01:03:05,000
by Peter Forsythe and co-authors.

1114
01:03:05,000 --> 01:03:07,000
That is sort of the gold standard.

1115
01:03:07,000 --> 01:03:09,000
And that paper has demonstrated,

1116
01:03:09,000 --> 01:03:12,000
it demonstrates that it can beat binomial trees.

1117
01:03:12,000 --> 01:03:14,000
Yes, with all these tricks,

1118
01:03:14,000 --> 01:03:18,000
we end up beating this method by about a factor of 25.

1119
01:03:18,000 --> 01:03:20,000
We're not talking about being twice as fast

1120
01:03:20,000 --> 01:03:21,000
or three times as fast.

1121
01:03:21,000 --> 01:03:24,000
I'm talking about being 25 times faster.

1122
01:03:24,000 --> 01:03:27,000
It is also simpler, because this method is five.

1123
01:03:27,000 --> 01:03:29,000
It has a penalty iteration going,

1124
01:03:29,000 --> 01:03:32,000
it has an adaptive grid strategy and so forth,

1125
01:03:32,000 --> 01:03:33,000
none of that.

1126
01:03:33,000 --> 01:03:36,000
It has stable gammas, which this paper does not have.

1127
01:03:36,000 --> 01:03:40,000
And I can set my time and asset steps anywhere I want.

1128
01:03:40,000 --> 01:03:43,000
I don't have this restriction on trying to keep everything

1129
01:03:43,000 --> 01:03:47,000
very in the Crank-Nicolson grid.

1130
01:03:47,000 --> 01:03:49,000
You have to be very careful in general

1131
01:03:49,000 --> 01:03:51,000
if the time step is too high,

1132
01:03:51,000 --> 01:03:53,000
because of these oscillations

1133
01:03:53,000 --> 01:03:54,000
that can come around boundaries.

1134
01:03:54,000 --> 01:03:58,000
But because I've avoided getting into boundaries,

1135
01:03:58,000 --> 01:04:01,000
I can set my time steps and assets in any way I want.

1136
01:04:01,000 --> 01:04:02,000
And then as a bonus,

1137
01:04:02,000 --> 01:04:04,000
I get this really nice high precision estimate

1138
01:04:04,000 --> 01:04:08,000
of the exercise boundary that I can use for other things.

1139
01:04:08,000 --> 01:04:11,000
One has two or three more tricks

1140
01:04:11,000 --> 01:04:13,000
if you want to really crank it up.

1141
01:04:13,000 --> 01:04:14,000
But I'm basically done,

1142
01:04:14,000 --> 01:04:17,000
and in summary here is just my recommendations.

1143
01:04:17,000 --> 01:04:19,000
Boundary integration, you use it

1144
01:04:19,000 --> 01:04:22,000
when the stock process is simple and there are no dividends,

1145
01:04:22,000 --> 01:04:25,000
except when you have simple portions of dividends.

1146
01:04:25,000 --> 01:04:27,000
American calls with general lumpy dividends,

1147
01:04:27,000 --> 01:04:29,000
you use Pascal's transform.

1148
01:04:29,000 --> 01:04:31,000
The process is not geometric,

1149
01:04:31,000 --> 01:04:33,000
geometric run in motion.

1150
01:04:33,000 --> 01:04:35,000
You can use the non-uniform FFT.

1151
01:04:35,000 --> 01:04:37,000
And if everything else fails,

1152
01:04:37,000 --> 01:04:39,000
you use the tricked-up Crank-Nicolson

1153
01:04:39,000 --> 01:04:41,000
finite difference grid.

1154
01:04:41,000 --> 01:04:43,000
And I think that kind of covers the situation,

1155
01:04:43,000 --> 01:04:46,000
so I think you'll see in practice.

1156
01:04:46,000 --> 01:04:49,000
I guess that I don't think anything is gonna

1157
01:04:49,000 --> 01:04:54,000
not fall into this, be picked up by this heap of things.

1158
01:04:54,000 --> 01:04:55,000
But hopefully between all these things,

1159
01:04:55,000 --> 01:04:58,000
that should be, and depending on your application,

1160
01:04:58,000 --> 01:05:00,000
that's something you can pick up.

1161
01:05:00,000 --> 01:05:02,000
And I think we hold it there,

1162
01:05:02,000 --> 01:05:04,000
and I know I'm five minutes late.

1163
01:05:04,000 --> 01:05:06,000
Okay, all right, thank you.

1164
01:05:06,000 --> 01:05:08,000
We can start with the Q&A session now.

1165
01:05:08,000 --> 01:05:09,000
Yeah, okay.

1166
01:05:09,000 --> 01:05:10,000
We'll start the Q&A from the room,

1167
01:05:10,000 --> 01:05:11,000
and then go to the WebEx.

1168
01:05:11,000 --> 01:05:12,000
Okay.

1169
01:05:12,000 --> 01:05:13,000
If anyone on the WebEx has a question,

1170
01:05:13,000 --> 01:05:16,000
please click the raise hand button.

1171
01:05:16,000 --> 01:05:19,000
I'm just gonna read the compliance statement again.

1172
01:05:19,000 --> 01:05:21,000
This talk will be open to a number of BOCO clients

1173
01:05:21,000 --> 01:05:22,000
who will join us online.

1174
01:05:22,000 --> 01:05:23,000
Given that our individual is present

1175
01:05:23,000 --> 01:05:25,000
from different organizations,

1176
01:05:25,000 --> 01:05:27,000
please do not share or discuss any sensitive

1177
01:05:27,000 --> 01:05:28,000
or confidential information or material

1178
01:05:29,000 --> 01:05:31,000
that could result in a conflict of interest

1179
01:05:31,000 --> 01:05:34,000
for any competition legal concepts.

1180
01:05:35,000 --> 01:05:36,000
Steve.

1181
01:05:36,000 --> 01:05:37,000
Yeah.

1182
01:05:37,000 --> 01:05:40,000
I have some comments, not really a question.

1183
01:05:40,000 --> 01:05:43,000
Thanks a lot, Lai, for being such insight

1184
01:05:43,000 --> 01:05:47,000
for a very rich content talk about very,

1185
01:05:47,000 --> 01:05:49,000
as you said, traditional old topic.

1186
01:05:49,000 --> 01:05:51,000
But I think the timing is perfect.

1187
01:05:52,000 --> 01:05:55,000
There is a big renaissance of research in this area

1188
01:05:55,000 --> 01:05:57,000
because it's in this.

1189
01:05:57,000 --> 01:05:59,000
Actually, just before your talk,

1190
01:05:59,000 --> 01:06:01,000
I just had a meeting with,

1191
01:06:01,000 --> 01:06:04,000
and our team meeting with Yimiya Trading,

1192
01:06:04,000 --> 01:06:08,000
talk about the needs for improve our American options

1193
01:06:08,000 --> 01:06:11,000
for the needs, including handle dividends,

1194
01:06:11,000 --> 01:06:15,000
handling tax rate, and so on and so forth,

1195
01:06:15,000 --> 01:06:19,000
which confirm your assessment that we need

1196
01:06:19,000 --> 01:06:23,000
a general framework, not only one model,

1197
01:06:23,000 --> 01:06:26,000
but maybe specific model for different purposes.

1198
01:06:26,000 --> 01:06:27,000
Yeah.

1199
01:06:27,000 --> 01:06:28,000
Yeah.

1200
01:06:28,000 --> 01:06:31,000
So I think that's a general comment

1201
01:06:31,000 --> 01:06:35,000
about the timing of this kind of research.

1202
01:06:35,000 --> 01:06:40,000
My question specifically about the 25 times speedup,

1203
01:06:41,000 --> 01:06:43,000
that's also included in the local valve.

1204
01:06:43,000 --> 01:06:44,000
Is local valve?

1205
01:06:45,000 --> 01:06:47,000
Yeah, these are all run for,

1206
01:06:47,000 --> 01:06:49,000
they're run in geometric Brownian motion

1207
01:06:49,000 --> 01:06:51,000
to give a benchmark.

1208
01:06:51,000 --> 01:06:54,000
But I did not, none of the tricks that I put in here

1209
01:06:54,000 --> 01:06:57,000
depend whatsoever on the process being

1210
01:06:57,000 --> 01:06:58,000
a geometric Brownian motion.

1211
01:06:58,000 --> 01:07:01,000
There are a couple of the ones that I mentioned.

1212
01:07:01,000 --> 01:07:03,000
If you wanna see some more tricks,

1213
01:07:03,000 --> 01:07:06,000
some of them are specific to geometric Brownian motion,

1214
01:07:06,000 --> 01:07:09,000
but I didn't list them here because they are universal.

1215
01:07:09,000 --> 01:07:12,000
They are that I rely, nowhere in any of this

1216
01:07:12,000 --> 01:07:17,000
do I rely on the process being a geometric Brownian motion.

1217
01:07:18,000 --> 01:07:21,000
What I'm saying here is also in this particular,

1218
01:07:21,000 --> 01:07:24,000
so the question is, I find it interesting to think about

1219
01:07:24,000 --> 01:07:28,000
will we use local valve for American options?

1220
01:07:30,000 --> 01:07:33,000
To my understanding, the way the market quotes are,

1221
01:07:33,000 --> 01:07:34,000
they may not actually,

1222
01:07:34,000 --> 01:07:36,000
I don't know that that is a market standard.

1223
01:07:36,000 --> 01:07:38,000
But I also know that if you're interested in,

1224
01:07:38,000 --> 01:07:41,000
for instance, fitting a local valve function,

1225
01:07:41,000 --> 01:07:44,000
and you know that the quotes are American,

1226
01:07:44,000 --> 01:07:46,000
and right now we de-Americanize,

1227
01:07:46,000 --> 01:07:50,000
I think the entire streets will just take the quotes,

1228
01:07:50,000 --> 01:07:53,000
and then they will de-Americanize the American quotes,

1229
01:07:53,000 --> 01:07:54,000
turn them into Europeans,

1230
01:07:54,000 --> 01:07:57,000
and then they fit their local valve functions.

1231
01:07:57,000 --> 01:08:00,000
If you want to actually fit your local valve functions

1232
01:08:00,000 --> 01:08:02,000
directly on an American option,

1233
01:08:02,000 --> 01:08:04,000
you need to have something that can price Americans

1234
01:08:04,000 --> 01:08:06,000
using local valve.

1235
01:08:06,000 --> 01:08:07,000
And then you need to think about

1236
01:08:07,000 --> 01:08:08,000
how you're gonna embed that in.

1237
01:08:08,000 --> 01:08:11,000
So the last approach here is designed specifically

1238
01:08:11,000 --> 01:08:13,000
with that application in mind.

1239
01:08:14,000 --> 01:08:18,000
Is that gonna be, I'm not sure that you will ever quote

1240
01:08:18,000 --> 01:08:20,000
right off local valves for Americans,

1241
01:08:20,000 --> 01:08:22,000
but I'm sure you'll use it

1242
01:08:22,000 --> 01:08:24,000
instead of the fitting of local valve models

1243
01:08:24,000 --> 01:08:26,000
for uses elsewhere,

1244
01:08:26,000 --> 01:08:29,000
and will be part of the hedging calculation and so forth.

1245
01:08:29,000 --> 01:08:30,000
Yeah.

1246
01:08:30,000 --> 01:08:31,000
Great, thank you.

1247
01:08:31,000 --> 01:08:33,000
Okay, any other questions?

1248
01:08:35,000 --> 01:08:37,000
Yes, question, yeah.

1249
01:08:37,000 --> 01:08:38,000
This is the carrot, right?

1250
01:08:38,000 --> 01:08:40,000
For the, for the, you're late,

1251
01:08:40,000 --> 01:08:43,000
about how does the work under the state of

1252
01:08:43,000 --> 01:08:44,000
an active industry,

1253
01:08:44,000 --> 01:08:47,000
and remember you had a before a paper, right?

1254
01:08:47,000 --> 01:08:50,000
In this case, the active boundary is more complicated.

1255
01:08:50,000 --> 01:08:52,000
Yes, so what happens,

1256
01:08:52,000 --> 01:08:55,000
so in the first approach here, boundary,

1257
01:08:55,000 --> 01:08:59,000
which requires you to explicitly calculate the boundary,

1258
01:08:59,000 --> 01:09:01,000
you need to then take into account

1259
01:09:01,000 --> 01:09:03,000
that the boundary under some conditions

1260
01:09:03,000 --> 01:09:04,000
will bifurcate into two.

1261
01:09:04,000 --> 01:09:07,000
We cover that for that method.

1262
01:09:07,000 --> 01:09:08,000
For these methods here,

1263
01:09:08,000 --> 01:09:09,000
we don't actually need the boundary

1264
01:09:09,000 --> 01:09:13,000
because they proceed more or less like a binomial tree

1265
01:09:13,000 --> 01:09:16,000
that you just loop them back and then you run over

1266
01:09:16,000 --> 01:09:18,000
and see, you know,

1267
01:09:18,000 --> 01:09:20,000
are they bigger than the exercise values or not?

1268
01:09:20,000 --> 01:09:23,000
So it's basically like a mutant thing.

1269
01:09:23,000 --> 01:09:24,000
And then you can ask subsequently,

1270
01:09:24,000 --> 01:09:26,000
where was that exercise boundary, by the way?

1271
01:09:26,000 --> 01:09:29,000
And it may be that they were two points,

1272
01:09:29,000 --> 01:09:32,000
but you don't explicitly use its location.

1273
01:09:32,000 --> 01:09:35,000
And the same thing goes for a finite difference grid per se.

1274
01:09:35,000 --> 01:09:37,000
There you will have to do,

1275
01:09:37,000 --> 01:09:40,000
this Brennan-Swartz algorithm will locate it,

1276
01:09:40,000 --> 01:09:43,000
and then you would have to modify that algorithm.

1277
01:09:43,000 --> 01:09:44,000
If there's a bifurcation,

1278
01:09:44,000 --> 01:09:46,000
you know there's gonna be one above and below.

1279
01:09:46,000 --> 01:09:49,000
So then you'll run that LUD composition

1280
01:09:49,000 --> 01:09:50,000
has to be done a little bit different,

1281
01:09:50,000 --> 01:09:52,000
so you do both cases,

1282
01:09:52,000 --> 01:09:54,000
but that's actually covered in the literature,

1283
01:09:54,000 --> 01:09:57,000
how to do that to make sure that now you have both

1284
01:09:57,000 --> 01:09:58,000
up and down.

1285
01:09:58,000 --> 01:10:00,000
There may be one above you and one below you,

1286
01:10:00,000 --> 01:10:02,000
something that had two of them,

1287
01:10:02,000 --> 01:10:04,000
two points, so you can't necessarily stop.

1288
01:10:04,000 --> 01:10:07,000
But I would say the case of negative interest rates

1289
01:10:07,000 --> 01:10:11,000
was more interesting to me a year or two ago,

1290
01:10:11,000 --> 01:10:14,000
when rates were, now it's like, I don't know.

1291
01:10:14,000 --> 01:10:17,000
That was probably once in humanity we saw that,

1292
01:10:17,000 --> 01:10:18,000
so I'm not sure I'm gonna.

1293
01:10:18,000 --> 01:10:20,000
We have decided in some of these cases

1294
01:10:20,000 --> 01:10:23,000
to remove the ability to just submit,

1295
01:10:23,000 --> 01:10:26,000
but we can add it back just in case we ever need it,

1296
01:10:26,000 --> 01:10:29,000
with some complication cases, no complication,

1297
01:10:29,000 --> 01:10:32,000
other cases will have to be aware of it.

1298
01:10:32,000 --> 01:10:36,000
But, so at this point I think it's probably the least

1299
01:10:36,000 --> 01:10:38,000
of our concerns on negative interest rates.

1300
01:10:38,000 --> 01:10:40,000
But yeah, any other questions?

1301
01:10:40,000 --> 01:10:41,000
Yes?

1302
01:10:41,000 --> 01:10:44,000
So in your PDE method,

1303
01:10:44,000 --> 01:10:48,000
you're using a query of time, right?

1304
01:10:48,000 --> 01:10:50,000
Yeah, we use query of time.

1305
01:10:50,000 --> 01:10:54,000
As a matter of fact, maybe taught to this point power

1306
01:10:54,000 --> 01:10:56,000
0.6 or something like that.

1307
01:10:56,000 --> 01:10:58,000
This would point out dividends,

1308
01:10:58,000 --> 01:10:59,000
like if you have dividends,

1309
01:10:59,000 --> 01:11:01,000
then you need to reset it.

1310
01:11:01,000 --> 01:11:03,000
So if you have, so this particular,

1311
01:11:03,000 --> 01:11:05,000
so if you're doing the square root,

1312
01:11:05,000 --> 01:11:08,000
you would only, if you have dividends in that case, right,

1313
01:11:08,000 --> 01:11:10,000
the exercise boundary obviously will change

1314
01:11:10,000 --> 01:11:12,000
for that particular case.

1315
01:11:12,000 --> 01:11:14,000
You'll need something for the last slice,

1316
01:11:14,000 --> 01:11:17,000
but for the other slices in many cases,

1317
01:11:17,000 --> 01:11:19,000
it doesn't look anything like that.

1318
01:11:19,000 --> 01:11:21,000
Yeah, but you will still be,

1319
01:11:21,000 --> 01:11:23,000
the algorithm will still find it,

1320
01:11:23,000 --> 01:11:25,000
and you will probably still use the square root spacing,

1321
01:11:25,000 --> 01:11:27,000
just because at the very last,

1322
01:11:27,000 --> 01:11:29,000
as you get to a maturity,

1323
01:11:29,000 --> 01:11:32,000
you will always have that kind of square root behavior.

1324
01:11:32,000 --> 01:11:36,000
Can you use boundary integration methods

1325
01:11:36,000 --> 01:11:41,000
from maturity to the first dividend?

1326
01:11:42,000 --> 01:11:44,000
Yes, it's a good question.

1327
01:11:44,000 --> 01:11:45,000
The question is whether you can,

1328
01:11:45,000 --> 01:11:47,000
can you combine some of these methods

1329
01:11:47,000 --> 01:11:49,000
by using the first piece?

1330
01:11:49,000 --> 01:11:51,000
Or if you know that you have,

1331
01:11:51,000 --> 01:11:53,000
if an exercise is in between,

1332
01:11:53,000 --> 01:11:54,000
for instance, for the put,

1333
01:11:54,000 --> 01:11:57,000
you'll see that they are discontinuities,

1334
01:11:57,000 --> 01:12:02,000
but an exercise boundary does sort of emerge in between.

1335
01:12:02,000 --> 01:12:04,000
Can you then, can you combine methods

1336
01:12:04,000 --> 01:12:08,000
and use maybe a piece of an integration,

1337
01:12:08,000 --> 01:12:11,000
boundary integration, and then a piece of convolution

1338
01:12:11,000 --> 01:12:14,000
or a piece of finite difference grid?

1339
01:12:14,000 --> 01:12:16,000
And the answer is yes, you can,

1340
01:12:16,000 --> 01:12:19,000
but you know, it starts getting complicated.

1341
01:12:19,000 --> 01:12:23,000
And if you are in a situation where things are unclear

1342
01:12:23,000 --> 01:12:24,000
to you in that gut,

1343
01:12:24,000 --> 01:12:26,000
I would go to a finite difference grid,

1344
01:12:26,000 --> 01:12:28,000
because some of the things are more mechanistic there.

1345
01:12:28,000 --> 01:12:31,000
If there's an exercise boundary, it will find it fast.

1346
01:12:31,000 --> 01:12:33,000
If it isn't there, it just, it won't find it.

1347
01:12:33,000 --> 01:12:35,000
It won't be there.

1348
01:12:35,000 --> 01:12:38,000
And sometimes these exercise boundaries can pop in and out.

1349
01:12:38,000 --> 01:12:40,000
But if you have discrete dividends and put,

1350
01:12:40,000 --> 01:12:43,000
sometimes there is no, nothing in between.

1351
01:12:43,000 --> 01:12:45,000
And then suddenly it will pop up again.

1352
01:12:45,000 --> 01:12:48,000
They can be very complicated in their topology

1353
01:12:48,000 --> 01:12:51,000
between dividend dates.

1354
01:12:51,000 --> 01:12:54,000
So depending on the style of dividends that you have.

1355
01:12:55,000 --> 01:12:58,000
One more question about the population transfer.

1356
01:12:58,000 --> 01:13:03,000
It could be extended to the call with borrow cost,

1357
01:13:03,000 --> 01:13:08,000
or you have some main optimal question, sorry.

1358
01:13:08,000 --> 01:13:11,000
Yeah, so the extension to borrow cost is,

1359
01:13:11,000 --> 01:13:12,000
I didn't put it in here

1360
01:13:12,000 --> 01:13:14,000
because there are complications around it.

1361
01:13:14,000 --> 01:13:15,000
It depends on the borrow cost.

1362
01:13:15,000 --> 01:13:18,000
If the borrow cost is negative, then the call options,

1363
01:13:18,000 --> 01:13:21,000
for instance, retain their per-mutant feature.

1364
01:13:21,000 --> 01:13:24,000
If the borrow cost is positive,

1365
01:13:24,000 --> 01:13:26,000
as if there's a continuous yield,

1366
01:13:26,000 --> 01:13:28,000
then in between these dates,

1367
01:13:28,000 --> 01:13:33,000
an exercise boundary may emerge for this case.

1368
01:13:33,000 --> 01:13:35,000
So if you wanna use a convolution method,

1369
01:13:35,000 --> 01:13:39,000
the only way to capture those kinds of events,

1370
01:13:39,000 --> 01:13:41,000
which for call options tends to be,

1371
01:13:41,000 --> 01:13:46,000
borrow cost has very, very limited effects on call options

1372
01:13:47,000 --> 01:13:49,000
unless it's really big,

1373
01:13:49,000 --> 01:13:51,000
if you already have a discrete dividend.

1374
01:13:51,000 --> 01:13:53,000
But then what you can do in that space

1375
01:13:53,000 --> 01:13:55,000
is that you would use these methods,

1376
01:13:55,000 --> 01:13:56,000
but you would have to chop it down

1377
01:13:56,000 --> 01:13:59,000
and use some kind of richness and extrapolation on the method

1378
01:13:59,000 --> 01:14:03,000
if you know the convergence from the per-mutant

1379
01:14:03,000 --> 01:14:06,000
to the American follows a particular pattern.

1380
01:14:06,000 --> 01:14:09,000
That's the only way you can do,

1381
01:14:09,000 --> 01:14:11,000
you can use these convolution outrides.

1382
01:14:11,000 --> 01:14:13,000
You have to treat things as a per-mutant,

1383
01:14:13,000 --> 01:14:15,000
and then you extrapolate to the limit,

1384
01:14:15,000 --> 01:14:17,000
or you move into a method that's,

1385
01:14:17,000 --> 01:14:19,000
you know, where you don't need to do that.

1386
01:14:19,000 --> 01:14:21,000
But the borrow cost is a complication

1387
01:14:21,000 --> 01:14:25,000
because it can make an exercise boundary emerge

1388
01:14:25,000 --> 01:14:27,000
in between dates for a call.

1389
01:14:27,000 --> 01:14:30,000
So you probably have a lot of experience with that.

1390
01:14:30,000 --> 01:14:31,000
I don't think it's a big effect

1391
01:14:31,000 --> 01:14:34,000
because the borrow cost tends to be relatively small.

1392
01:14:34,000 --> 01:14:35,000
So.

1393
01:14:35,000 --> 01:14:38,000
And then you have a put option with cash dividends?

1394
01:14:38,000 --> 01:14:40,000
So put option with cash dividends,

1395
01:14:40,000 --> 01:14:43,000
so there are three approaches, right?

1396
01:14:43,000 --> 01:14:46,000
Depending on what kind of dividend it is.

1397
01:14:46,000 --> 01:14:49,000
If it is a proportional dividend,

1398
01:14:49,000 --> 01:14:53,000
then you can use the first integration approach.

1399
01:14:53,000 --> 01:14:55,000
If it is not a proportional dividend,

1400
01:14:55,000 --> 01:14:58,000
what you can do is you can use the convolution method,

1401
01:14:58,000 --> 01:15:01,000
but you have to use some kind of extrapolation to the limit

1402
01:15:01,000 --> 01:15:03,000
because it is not a per-mutant,

1403
01:15:03,000 --> 01:15:06,000
it is somewhere in between.

1404
01:15:06,000 --> 01:15:08,000
Or you can use the last method,

1405
01:15:08,000 --> 01:15:11,000
we'll handle that or anything else without any problem.

1406
01:15:11,000 --> 01:15:12,000
Find a difference,

1407
01:15:12,000 --> 01:15:15,000
any kind of dividend can easily be modified,

1408
01:15:15,000 --> 01:15:16,000
that's the reason.

1409
01:15:17,000 --> 01:15:19,000
So you'd have to make a choice.

1410
01:15:19,000 --> 01:15:22,000
And that's something that you have to run a benchmark test.

1411
01:15:22,000 --> 01:15:24,000
It also depends on,

1412
01:15:24,000 --> 01:15:25,000
if it's local volatility,

1413
01:15:25,000 --> 01:15:28,000
the choice is made for you.

1414
01:15:28,000 --> 01:15:31,000
If it's geometric Brownian motion,

1415
01:15:31,000 --> 01:15:36,000
then you may be able to do extrapolation approach

1416
01:15:36,000 --> 01:15:38,000
might work perfectly fine.

1417
01:15:38,000 --> 01:15:40,000
If there are no more questions from the room,

1418
01:15:40,000 --> 01:15:42,000
I think we've passed it to Webex.

1419
01:15:42,000 --> 01:15:44,000
Yeah, come here.

1420
01:15:44,000 --> 01:15:46,000
So for people on Webex,

1421
01:15:46,000 --> 01:15:51,000
I mean, there is a raise hand button on the right of your Webex.

1422
01:15:51,000 --> 01:15:54,000
Yeah, if you do have any questions, please click the button.

1423
01:15:54,000 --> 01:15:56,000
I will unmute you.

1424
01:15:56,000 --> 01:15:58,000
So there is a question from Julie.

1425
01:15:58,000 --> 01:15:59,000
Yeah, please go ahead.

1426
01:16:02,000 --> 01:16:04,000
About the economics.

1427
01:16:04,000 --> 01:16:07,000
Looking in FX trade history for LCT,

1428
01:16:07,000 --> 01:16:11,000
I see that European options are 1000 times more popular.

1429
01:16:11,000 --> 01:16:13,000
And it seems that in equities,

1430
01:16:13,000 --> 01:16:15,000
it's the American options that are more popular.

1431
01:16:15,000 --> 01:16:17,000
Where does the difference come from?

1432
01:16:19,000 --> 01:16:20,000
Yeah, why is that?

1433
01:16:20,000 --> 01:16:26,000
It's just equities for all options on the index is more European,

1434
01:16:26,000 --> 01:16:28,000
but for corporate,

1435
01:16:28,000 --> 01:16:31,000
each individual corporate is more European.

1436
01:16:31,000 --> 01:16:35,000
Each individual corporate is all American options.

1437
01:16:35,000 --> 01:16:39,000
It's just that kind of originally convention.

1438
01:16:39,000 --> 01:16:41,000
And I would say...

1439
01:16:41,000 --> 01:16:45,000
Can you explain what the other options are?

1440
01:16:45,000 --> 01:16:48,000
Yes, it's a tradition.

1441
01:16:48,000 --> 01:16:49,000
Yeah, yeah, yeah.

1442
01:16:49,000 --> 01:16:52,000
It's kind of a tradition in America.

1443
01:16:52,000 --> 01:16:55,000
It's a tradition that Americans,

1444
01:16:55,000 --> 01:17:00,000
particularly black people or something like that,

1445
01:17:00,000 --> 01:17:04,000
we know not American options is just no.

1446
01:17:04,000 --> 01:17:06,000
That's not the right option.

1447
01:17:06,000 --> 01:17:11,000
But it's all you have to do is to access and for a trade.

1448
01:17:11,000 --> 01:17:15,000
You can go into all of the American options whenever you want.

1449
01:17:15,000 --> 01:17:17,000
That is effectively an American option.

1450
01:17:17,000 --> 01:17:20,000
And that can be very, very quickly.

1451
01:17:20,000 --> 01:17:24,000
With online trade history, that's because FX does not have any long-term dividends.

1452
01:17:24,000 --> 01:17:26,000
And so you can join only that method.

1453
01:17:26,000 --> 01:17:29,000
And that's one thing I'm sure you can handle that.

1454
01:17:30,000 --> 01:17:34,000
Like trade trade, and some kind of a new idea,

1455
01:17:34,000 --> 01:17:38,000
but the reality is that the American options are basically hand-to-hand.

1456
01:17:38,000 --> 01:17:41,000
But the other thing is that trade trade is done very, very easily.

1457
01:17:41,000 --> 01:17:48,000
So what XCIC is special in that it has a traditional model of American options

1458
01:17:48,000 --> 01:17:52,000
changing anywhere else to European and then European options.

1459
01:17:52,000 --> 01:18:01,000
Any more questions on WebEx?

1460
01:18:01,000 --> 01:18:05,000
Okay, there are a few questions on WebEx.

1461
01:18:05,000 --> 01:18:07,000
I will ask you on that.

1462
01:18:07,000 --> 01:18:12,000
Okay, so I think that being here,

1463
01:18:12,000 --> 01:18:13,000
I think we are still doing a great job.

1464
01:18:13,000 --> 01:18:16,000
I just want to thank you for your attention.

1465
01:18:16,000 --> 01:18:19,000
Thanks.

1466
01:18:46,000 --> 01:18:48,000
Thank you.

1467
01:19:16,000 --> 01:19:18,000
Thank you.

1468
01:19:46,000 --> 01:19:48,000
Thank you.

1469
01:20:16,000 --> 01:20:18,000
Thank you.

1470
01:20:46,000 --> 01:20:48,000
Thank you.

1471
01:21:16,000 --> 01:21:18,000
Thank you.

1472
01:21:46,000 --> 01:21:48,000
Thank you.

1473
01:22:16,000 --> 01:22:18,000
Thank you.

